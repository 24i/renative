var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.default=exports.PIPES=exports.cleanPlatformBuild=exports.createPlatformBuild=void 0;var _chalk=_interopRequireDefault(require("chalk"));var _path=_interopRequireDefault(require("path"));var _fs=_interopRequireDefault(require("fs"));var _common=require("../common");var _fileutils=require("../fileutils");var _buildHooks=require("../buildHooks");var _app=_interopRequireDefault(require("./app"));var CONFIGURE='configure';var UPDATE='update';var LIST='list';var ADD='add';var REMOVE='remove';var EJECT='eject';var CONNECT='connect';var PIPES={PLATFORM_CONFIGURE_BEFORE:'platform:configure:before',PLATFORM_CONFIGURE_AFTER:'platform:configure:after',PLATFORM_UPDATE_BEFORE:'platform:update:before',PLATFORM_UPDATE_AFTER:'platform:update:after',PLATFORM_LIST_BEFORE:'platform:list:before',PLATFORM_LIST_AFTER:'platform:list:after',PLATFORM_ADD_BEFORE:'platform:add:before',PLATFORM_ADD_AFTER:'platform:add:after',PLATFORM_REMOVE_BEFORE:'platform:remove:before',PLATFORM_REMOVE_AFTER:'platform:remove:after',PLATFORM_EJECT_BEFORE:'platform:eject:before',PLATFORM_EJECT_AFTER:'platform:ejecct:after',PLATFORM_CONNECT_BEFORE:'platform:connect:before',PLATFORM_CONNECT_AFTER:'platform:connect:after'};exports.PIPES=PIPES;var run=function run(c){(0,_common.logTask)('run');switch(c.subCommand){case CONFIGURE:return _runCreatePlatforms(c);break;case EJECT:return _runEjectPlatforms(c);break;case CONNECT:return _runConnectPlatforms(c);break;default:return Promise.reject("Sub-Command "+c.subCommand+" not supported");}};var _runCreatePlatforms=function _runCreatePlatforms(c){return new Promise(function(resolve,reject){var p=c.program.platform||'all';(0,_common.logTask)("_runCreatePlatforms:"+p);(0,_buildHooks.executePipe)(c,PIPES.PLATFORM_CONFIGURE_BEFORE).then(function(){return cleanPlatformBuild(c,p);}).then(function(){return _runCleanPlaformAssets(c);}).then(function(){return _runCopyPlatforms(c,p);}).then(function(){return(0,_buildHooks.executePipe)(c,PIPES.PLATFORM_CONFIGURE_AFTER);}).then(function(){return resolve();}).catch(function(e){return reject(e);});});};var _runEjectPlatforms=function _runEjectPlatforms(c){return new Promise(function(resolve,reject){(0,_common.logTask)('_runEjectPlatforms');var readline=require('readline').createInterface({input:process.stdin,output:process.stdout});readline.question((0,_common.getQuestion)('This will copy platformTemplates folder from ReNative managed directly to your project. Type (y) to confirm'),function(v){if(v.toLowerCase()==='y'){var ptfn='platformTemplates';(0,_fileutils.copyFolderContentsRecursiveSync)(c.rnvPlatformTemplatesFolder,_path.default.join(c.projectRootFolder,ptfn));c.projectConfig.platformTemplatesFolder="./"+ptfn;_fs.default.writeFileSync(c.projectConfigPath,JSON.stringify(c.projectConfig,null,2));(0,_common.logSuccess)("Your platform templates are located in "+_chalk.default.white(c.projectConfig.platformTemplatesFolder)+" now. You can edit them directly!");resolve();}else{resolve();}});});};var _runConnectPlatforms=function _runConnectPlatforms(c){return new Promise(function(resolve,reject){(0,_common.logTask)('_runConnectPlatforms');var readline=require('readline').createInterface({input:process.stdin,output:process.stdout});readline.question((0,_common.getQuestion)('This will point platformTemplates folder from your local project to ReNative managed one. Type (y) to confirm'),function(v){if(v.toLowerCase()==='y'){var ptfn='platformTemplates';c.projectConfig.platformTemplatesFolder="RNV_HOME/"+ptfn;_fs.default.writeFileSync(c.projectConfigPath,JSON.stringify(c.projectConfig,null,2));(0,_common.logSuccess)("You're now using ReNativeplatformTemplates located in "+_chalk.default.white(c.rnvPlatformTemplatesFolder)+" now!");resolve();}else{resolve();}});});};var _addPlatform=function _addPlatform(platform,program,process){return new Promise(function(resolve,reject){if(!(0,_common.isPlatformSupportedSync)(platform,resolve))return;(0,_common.getConfig)().then(function(v){_runAddPlatform().then(function(){return resolve();}).catch(function(e){return reject(e);});});});};var _removePlatform=function _removePlatform(platform,program,process){return new Promise(function(resolve,reject){if(!(0,_common.isPlatformSupportedSync)(platform,resolve))return;console.log('REMOVE_PLATFORM: ',platform);resolve();});};var _runCleanPlaformAssets=function _runCleanPlaformAssets(c){return new Promise(function(resolve,reject){(0,_common.logTask)('_runCleanPlaformAssets');(0,_fileutils.cleanFolder)(c.platformAssetsFolder).then(function(){resolve();});});};var _runCopyPlatforms=function _runCopyPlatforms(c,platform){return new Promise(function(resolve,reject){(0,_common.logTask)("_runCopyPlatforms:"+platform);var copyPlatformTasks=[];if(platform==='all'){for(var k in c.appConfigFile.platforms){if((0,_common.isPlatformSupportedSync)(k)){var ptPath=_path.default.join(c.platformTemplatesFolder,""+k);var pPath=_path.default.join(c.platformBuildsFolder,c.appId+"_"+k);copyPlatformTasks.push((0,_fileutils.copyFolderContentsRecursiveSync)(ptPath,pPath));}}}else if((0,_common.isPlatformSupportedSync)(platform)){var _ptPath=_path.default.join(c.platformTemplatesFolder,""+platform);var _pPath=_path.default.join(c.platformBuildsFolder,c.appId+"_"+platform);copyPlatformTasks.push((0,_fileutils.copyFolderContentsRecursiveSync)(_ptPath,_pPath));}else{logWarning("Your platform "+_chalk.default.white(platform)+" config is not present. Check "+_chalk.default.white(c.appConfigPath));}Promise.all(copyPlatformTasks).then(function(values){resolve();});});};var cleanPlatformBuild=function cleanPlatformBuild(c,platform){return new Promise(function(resolve,reject){(0,_common.logTask)("cleanPlatformBuild:"+platform);var cleanTasks=[];if(platform==='all'){for(var k in c.appConfigFile.platforms){if((0,_common.isPlatformSupportedSync)(k)){var pPath=_path.default.join(c.platformBuildsFolder,c.appId+"_"+k);cleanTasks.push((0,_fileutils.cleanFolder)(pPath));}}}else if((0,_common.isPlatformSupportedSync)(platform)){var _pPath2=_path.default.join(c.platformBuildsFolder,c.appId+"_"+platform);cleanTasks.push((0,_fileutils.cleanFolder)(_pPath2));}Promise.all(cleanTasks).then(function(values){resolve();});});};exports.cleanPlatformBuild=cleanPlatformBuild;var _runAddPlatform=function _runAddPlatform(c){return new Promise(function(resolve,reject){(0,_common.logTask)('runAddPlatform');resolve();});};var createPlatformBuild=function createPlatformBuild(c,platform){return new Promise(function(resolve,reject){(0,_common.logTask)("createPlatformBuild:"+platform);if(!(0,_common.isPlatformSupportedSync)(platform,null,reject))return;var pPath=_path.default.join(c.platformBuildsFolder,c.appId+"_"+platform);var ptPath=_path.default.join(c.platformTemplatesFolder,""+platform);(0,_fileutils.copyFolderContentsRecursiveSync)(ptPath,pPath,false,[_path.default.join(ptPath,'_privateConfig')]);resolve();});};exports.createPlatformBuild=createPlatformBuild;var _default=run;exports.default=_default;