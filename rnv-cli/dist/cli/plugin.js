var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.default=exports.PIPES=void 0;var _chalk=_interopRequireDefault(require("chalk"));var _path=_interopRequireDefault(require("path"));var _fs=_interopRequireDefault(require("fs"));var _common=require("../common");var _constants=require("../constants");var _fileutils=require("../fileutils");var _tizen=require("../platformTools/tizen");var _webos=require("../platformTools/webos");var _android=require("../platformTools/android");var _firefox=require("../platformTools/firefox");var _buildHooks=require("../buildHooks");var LIST='list';var ADD='add';var UPDATE='update';var PIPES={PLUGIN_LIST_BEFORE:'plugin:list:before',PLUGIN_LIST_AFTER:'plugin:list:after',PLUGIN_ADD_BEFORE:'plugin:add:before',PLUGIN_ADD_AFTER:'plugin:add:after',PLUGIN_UPDATE_BEFORE:'plugin:update:before',PLUGIN_UPDATE_AFTER:'plugin:update:after'};exports.PIPES=PIPES;var run=function run(c){return new Promise(function(resolve,reject){(0,_common.logTask)('run');switch(c.subCommand){case LIST:(0,_buildHooks.executePipe)(c,PIPES.PLUGIN_LIST_BEFORE).then(function(){return _runList(c);}).then(function(){return(0,_buildHooks.executePipe)(c,PIPES.PLUGIN_LIST_AFTER);}).then(function(){return resolve();}).catch(function(e){return reject(e);});return;case ADD:(0,_buildHooks.executePipe)(c,PIPES.PLUGIN_ADD_BEFORE);_runAdd(c).then(function(){return(0,_buildHooks.executePipe)(c,PIPES.PLUGIN_ADD_AFTER);}).then(function(){return resolve();}).catch(function(e){return reject(e);});return;case UPDATE:(0,_buildHooks.executePipe)(c,PIPES.PLUGIN_UPDATE_BEFORE);_runUpdate(c).then(function(){return(0,_buildHooks.executePipe)(c,PIPES.PLUGIN_UPDATE_AFTER);}).then(function(){return resolve();}).catch(function(e){return reject(e);});return;default:return Promise.reject("Sub-Command "+_chalk.default.white.bold(c.subCommand)+" not supported!");}});};var _runList=function _runList(c){return new Promise(function(resolve,reject){(0,_common.logTask)('_runList');var platform=c.platform,program=c.program;var o=_getPluginList(c,platform);console.log(o.asString);resolve();});};var _getPluginList=function _getPluginList(c,platform){var isUpdate=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var plugins=JSON.parse(_fs.default.readFileSync(_path.default.join(c.rnvPluginTemplatesConfigPath)).toString()).plugins;var output={asString:'',plugins:[],json:plugins};var i=1;var projectPlugins=c.projectPlugins;var _loop=function _loop(k){var p=plugins[k];platforms='';_common.SUPPORTED_PLATFORMS.forEach(function(v){if(p[v])platforms+=v+", ";});if(platforms.length)platforms=platforms.slice(0,platforms.length-2);var installedPlugin=c.pluginConfig&&c.pluginConfig.plugins&&c.pluginConfig.plugins[k];var installedString=installedPlugin?_chalk.default.red('installed'):_chalk.default.green('not installed');if(isUpdate&&installedPlugin){output.plugins.push(k);output.asString+="-["+i+"] "+_chalk.default.white(k)+" ("+_chalk.default.red(installedPlugin.version)+") => ("+_chalk.default.green(p.version)+")\n";i++;}else if(!isUpdate){output.plugins.push(k);output.asString+="-["+i+"] "+_chalk.default.white(k)+" ("+_chalk.default.blue(p.version)+") ["+platforms+"] - "+installedString+"\n";i++;}};for(var k in plugins){_loop(k);}return output;};var _runAdd=function _runAdd(c){return new Promise(function(resolve,reject){(0,_common.logTask)('_runAdd');var o=_getPluginList(c,platform);console.log(o.asString);var readline=require('readline').createInterface({input:process.stdin,output:process.stdout});readline.question((0,_common.getQuestion)('Type plugin numbers you want to add (comma separated)'),function(v){var choices=v.split(',');var selectedPlugins={};var msg='Installing: \n';choices.forEach(function(v){var i=parseInt(v,10)-1;var key=o.plugins[i];if(key){selectedPlugins[key]=o.json[key];msg+="- "+_chalk.default.white(key)+" v("+_chalk.default.green(o.json[key].version)+")\n";}});console.log(msg);for(var k in selectedPlugins){c.pluginConfig.plugins[k]=selectedPlugins[k];}_fs.default.writeFileSync(c.pluginConfigPath,JSON.stringify(c.pluginConfig,null,2));(0,_common.logSuccess)('Plugins installed successfully!');resolve();});});};var _runUpdate=function _runUpdate(c){return new Promise(function(resolve,reject){(0,_common.logTask)('_runUpdate');var o=_getPluginList(c,platform,true);console.log(o.asString);var readline=require('readline').createInterface({input:process.stdin,output:process.stdout});readline.question((0,_common.getQuestion)('Above installed plugins will be updated with RNV. press (y) to confirm'),function(v){var choices=v.split(',');for(var k in c.pluginConfig.plugins){c.pluginConfig.plugins[k]=o.json[k];}_fs.default.writeFileSync(c.pluginConfigPath,JSON.stringify(c.pluginConfig,null,2));(0,_common.logSuccess)('Plugins updated successfully!');resolve();});});};var _default=run;exports.default=_default;