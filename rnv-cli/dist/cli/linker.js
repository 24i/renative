var _interopRequireWildcard=require("@babel/runtime/helpers/interopRequireWildcard");var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _path=_interopRequireDefault(require("path"));var _fs=_interopRequireDefault(require("fs"));var _shelljs=_interopRequireDefault(require("shelljs"));var _common=require("../common");var _constants=require("../constants");var _exec=require("../exec");var _apple=require("../platformTools/apple");var _web=require("../platformTools/web");var _tizen=require("../platformTools/tizen");var _webos=require("../platformTools/webos");var _firefox=require("../platformTools/firefox");var _electron=require("../platformTools/electron");var _android=require("../platformTools/android");var _app=_interopRequireWildcard(require("./app"));var _fileutils=require("../fileutils");var LINK='link';var run=function run(c){(0,_common.logTask)('run');switch(c.command){case LINK:return _link(c);break;default:return Promise.reject("Command "+c.command+" not supported");}};var _link=function _link(c){return new Promise(function(resolve,reject){if(_fs.default.existsSync(c.projectNpmLinkPolyfillPath)){var l=JSON.parse(_fs.default.readFileSync(c.projectNpmLinkPolyfillPath).toString());for(var key in l){var source=_path.default.resolve(l[key]);var nm=_path.default.join(source,'node_modules');var dest=_path.default.join(c.nodeModulesFolder,key);if(_fs.default.existsSync(source)){(0,_fileutils.copyFolderContentsRecursiveSync)(source,dest,false,[nm]);}else{(0,_common.logWarning)("Source: "+source+" doesn't exists!");}}}else{(0,_common.logWarning)(c.projectNpmLinkPolyfillPath+" file not found. nothing to link!");resolve();}});};var _default=run;exports.default=_default;