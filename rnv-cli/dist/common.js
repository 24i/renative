var _interopRequireWildcard=require("@babel/runtime/helpers/interopRequireWildcard");var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});Object.defineProperty(exports,"IOS",{enumerable:true,get:function get(){return _constants.IOS;}});Object.defineProperty(exports,"ANDROID",{enumerable:true,get:function get(){return _constants.ANDROID;}});Object.defineProperty(exports,"ANDROID_TV",{enumerable:true,get:function get(){return _constants.ANDROID_TV;}});Object.defineProperty(exports,"ANDROID_WEAR",{enumerable:true,get:function get(){return _constants.ANDROID_WEAR;}});Object.defineProperty(exports,"WEB",{enumerable:true,get:function get(){return _constants.WEB;}});Object.defineProperty(exports,"TIZEN",{enumerable:true,get:function get(){return _constants.TIZEN;}});Object.defineProperty(exports,"TVOS",{enumerable:true,get:function get(){return _constants.TVOS;}});Object.defineProperty(exports,"WEBOS",{enumerable:true,get:function get(){return _constants.WEBOS;}});Object.defineProperty(exports,"MACOS",{enumerable:true,get:function get(){return _constants.MACOS;}});Object.defineProperty(exports,"WINDOWS",{enumerable:true,get:function get(){return _constants.WINDOWS;}});Object.defineProperty(exports,"TIZEN_WATCH",{enumerable:true,get:function get(){return _constants.TIZEN_WATCH;}});Object.defineProperty(exports,"CLI_ANDROID_EMULATOR",{enumerable:true,get:function get(){return _constants.CLI_ANDROID_EMULATOR;}});Object.defineProperty(exports,"CLI_ANDROID_AVDMANAGER",{enumerable:true,get:function get(){return _constants.CLI_ANDROID_AVDMANAGER;}});Object.defineProperty(exports,"CLI_ANDROID_SDKMANAGER",{enumerable:true,get:function get(){return _constants.CLI_ANDROID_SDKMANAGER;}});Object.defineProperty(exports,"CLI_ANDROID_ADB",{enumerable:true,get:function get(){return _constants.CLI_ANDROID_ADB;}});Object.defineProperty(exports,"CLI_TIZEN_EMULATOR",{enumerable:true,get:function get(){return _constants.CLI_TIZEN_EMULATOR;}});Object.defineProperty(exports,"CLI_TIZEN",{enumerable:true,get:function get(){return _constants.CLI_TIZEN;}});Object.defineProperty(exports,"CLI_WEBOS_ARES",{enumerable:true,get:function get(){return _constants.CLI_WEBOS_ARES;}});Object.defineProperty(exports,"CLI_WEBOS_ARES_PACKAGE",{enumerable:true,get:function get(){return _constants.CLI_WEBOS_ARES_PACKAGE;}});Object.defineProperty(exports,"CLI_WEBBOS_ARES_INSTALL",{enumerable:true,get:function get(){return _constants.CLI_WEBBOS_ARES_INSTALL;}});Object.defineProperty(exports,"CLI_WEBBOS_ARES_LAUNCH",{enumerable:true,get:function get(){return _constants.CLI_WEBBOS_ARES_LAUNCH;}});Object.defineProperty(exports,"FORM_FACTOR_MOBILE",{enumerable:true,get:function get(){return _constants.FORM_FACTOR_MOBILE;}});Object.defineProperty(exports,"FORM_FACTOR_DESKTOP",{enumerable:true,get:function get(){return _constants.FORM_FACTOR_DESKTOP;}});Object.defineProperty(exports,"FORM_FACTOR_WATCH",{enumerable:true,get:function get(){return _constants.FORM_FACTOR_WATCH;}});Object.defineProperty(exports,"FORM_FACTOR_TV",{enumerable:true,get:function get(){return _constants.FORM_FACTOR_TV;}});exports.default=exports.askQuestion=exports.finishQuestion=exports.checkPortInUse=exports.cleanPlatformIfRequired=exports.getIP=exports.getConfigProp=exports.logSuccess=exports.getQuestion=exports.getAppLicense=exports.getAppAuthor=exports.getAppDescription=exports.getAppConfigId=exports.getEntryFile=exports.copyBuildsFolder=exports.writeCleanFile=exports.getAppVersionCode=exports.getAppVersion=exports.getAppTitle=exports.getAppId=exports.configureIfRequired=exports.logWarning=exports.logEnd=exports.checkSdk=exports.isSdkInstalled=exports.isPlatformActive=exports.logErrorPlatform=exports.logInfo=exports.logDebug=exports.initializeBuilder=exports.logError=exports.logComplete=exports.logTask=exports.getAppTemplateFolder=exports.getAppFolder=exports.isPlatformSupportedSync=exports.isPlatformSupported=exports.SUPPORTED_PLATFORMS=void 0;var _objectSpread2=_interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));var _extends2=_interopRequireDefault(require("@babel/runtime/helpers/extends"));var _chalk=_interopRequireDefault(require("chalk"));var _fs=_interopRequireDefault(require("fs"));var _path=_interopRequireDefault(require("path"));var _detectPort=_interopRequireDefault(require("detect-port"));var _fileutils=require("./fileutils");var _platform=require("./cli/platform");var _app=_interopRequireWildcard(require("./cli/app"));var _tizen=require("./platformTools/tizen");var _constants=require("./constants");var _exec=require("./exec");var SUPPORTED_PLATFORMS=[_constants.IOS,_constants.ANDROID,_constants.ANDROID_TV,_constants.ANDROID_WEAR,_constants.WEB,_constants.TIZEN,_constants.TVOS,_constants.WEBOS,_constants.MACOS,_constants.WINDOWS,_constants.TIZEN_WATCH,_constants.KAIOS,_constants.FIREFOX_OS,_constants.FIREFOX_TV];exports.SUPPORTED_PLATFORMS=SUPPORTED_PLATFORMS;var SUPPORTED_PLATFORMS_MAC=[_constants.IOS,_constants.ANDROID,_constants.ANDROID_TV,_constants.ANDROID_WEAR,_constants.WEB,_constants.TIZEN,_constants.TVOS,_constants.WEBOS,_constants.MACOS,_constants.WINDOWS,_constants.TIZEN_WATCH,_constants.KAIOS,_constants.FIREFOX_OS,_constants.FIREFOX_TV];var SUPPORTED_PLATFORMS_WIN=[_constants.ANDROID,_constants.ANDROID_TV,_constants.ANDROID_WEAR,_constants.WEB,_constants.TIZEN,_constants.TVOS,_constants.WEBOS,_constants.WINDOWS,_constants.TIZEN_WATCH,_constants.KAIOS,_constants.FIREFOX_OS,_constants.FIREFOX_TV];var SUPPORTED_PLATFORMS_LINUX=[_constants.ANDROID,_constants.ANDROID_TV,_constants.ANDROID_WEAR];var RNV_START='ðŸš€ ReNative';var RNV='ReNative';var LINE=_chalk.default.white.bold('----------------------------------------------------------');var LINE2=_chalk.default.gray('----------------------------------------------------------');var _currentJob;var _currentProcess;var _isInfoEnabled=false;var base=_path.default.resolve('.');var homedir=require('os').homedir();var SDK_PLATFORMS={};SDK_PLATFORMS[_constants.ANDROID]=_constants.ANDROID_SDK;SDK_PLATFORMS[_constants.ANDROID_TV]=_constants.ANDROID_SDK;SDK_PLATFORMS[_constants.ANDROID_WEAR]=_constants.ANDROID_SDK;SDK_PLATFORMS[_constants.TIZEN]=_constants.TIZEN_SDK;SDK_PLATFORMS[_constants.TIZEN_WATCH]=_constants.TIZEN_SDK;SDK_PLATFORMS[_constants.WEBOS]=_constants.WEBOS_SDK;SDK_PLATFORMS[_constants.KAIOS]=_constants.KAIOS_SDK;var isPlatformSupportedSync=function isPlatformSupportedSync(platform,resolve,reject){if(!platform){if(reject){reject(_chalk.default.red("You didn't specify platform. make sure you add \""+_chalk.default.white.bold('-p <PLATFORM>')+"\" option to your command!"));}return false;}if(!SUPPORTED_PLATFORMS.includes(platform)){if(reject)reject(_chalk.default.red("Platform "+platform+" is not supported"));return false;}if(resolve)resolve();return true;};exports.isPlatformSupportedSync=isPlatformSupportedSync;var isPlatformSupported=function isPlatformSupported(c){return new Promise(function(resolve,reject){if(!c.platform||c.platform==='?'){var platformsAsString='';var platformsAsArray=[];var i=1;for(var k in c.appConfigFile.platforms){platformsAsString+="-["+i+"] "+_chalk.default.white(k)+"\n";platformsAsArray.push(k);i++;}askQuestion("Pick one of available platforms (number or text):\n"+platformsAsString).then(function(v){finishQuestion();var selectedPlatform;if(isNaN(v)){selectedPlatform=v;}else{selectedPlatform=platformsAsArray[v-1];}c.platform=selectedPlatform;c.program.platform=selectedPlatform;resolve(selectedPlatform);});}else if(!SUPPORTED_PLATFORMS.includes(c.platform)){reject(_chalk.default.red("Platform "+c.platform+" is not supported"));}else{resolve();}});};exports.isPlatformSupported=isPlatformSupported;var _getPath=function _getPath(c,p){var key=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'undefined';var original=arguments.length>3?arguments[3]:undefined;if(!p){logWarning("Path "+_chalk.default.white(key)+" is not defined");return original;}if(p.startsWith('./')){return _path.default.join(c.projectRootFolder,p);}return p.replace(/RNV_HOME/g,c.rnvHomeFolder).replace(/~/g,c.homeFolder);};var initializeBuilder=function initializeBuilder(cmd,subCmd,process,program){return new Promise(function(resolve,reject){_currentJob=cmd;_currentProcess=process;console.log(_chalk.default.white("\n"+LINE+"\n "+RNV_START+" "+_chalk.default.white.bold(cmd+" "+(subCmd||''))+" is firing up! \uD83D\uDD25\n"+LINE+"\n"));logTask('initializeBuilder');_isInfoEnabled=program.info===true;var c={cli:{}};c.program=program;c.process=process;c.command=cmd;c.subCommand=subCmd;c.defaultPorts=_constants.DEFAULT_PORTS;c.appID=program.appConfigID;c.rnvRootFolder=_path.default.join(__dirname,'../..');c.rnvHomeFolder=_path.default.join(__dirname,'..');c.rnvPlatformTemplatesFolder=_path.default.join(c.rnvHomeFolder,'platformTemplates');c.rnvPluginTemplatesFolder=_path.default.join(c.rnvHomeFolder,'pluginTemplates');c.rnvPluginTemplatesConfigPath=_path.default.join(c.rnvPluginTemplatesFolder,'plugins.json');c.rnvPackagePath=_path.default.join(c.rnvRootFolder,'package.json');c.rnvPluginsFolder=_path.default.join(c.rnvHomeFolder,'plugins');c.rnvPackage=JSON.parse(_fs.default.readFileSync(c.rnvPackagePath).toString());if(c.command==='app'&&c.subCommand==='create'){resolve(c);return;}c.platform=program.platform;c.projectRootFolder=base;c.buildHooksFolder=_path.default.join(c.projectRootFolder,'buildHooks/src');c.buildHooksDistFolder=_path.default.join(c.projectRootFolder,'buildHooks/dist');c.buildHooksIndexPath=_path.default.join(c.buildHooksFolder,'index.js');c.buildHooksDistIndexPath=_path.default.join(c.buildHooksDistFolder,'index.js');c.projectSourceFolder=_path.default.join(c.projectRootFolder,'src');c.projectNpmLinkPolyfillPath=_path.default.join(c.projectRootFolder,'npm_link_polyfill.json');c.homeFolder=homedir;c.globalConfigFolder=_path.default.join(homedir,'.rnv');c.globalConfigPath=_path.default.join(c.globalConfigFolder,_constants.RNV_GLOBAL_CONFIG_NAME);c.projectConfigPath=_path.default.join(c.projectRootFolder,_constants.RNV_PROJECT_CONFIG_NAME);c.projectConfigLocalPath=_path.default.join(c.projectRootFolder,_constants.RNV_PROJECT_CONFIG_LOCAL_NAME);c.projectPackagePath=_path.default.join(c.projectRootFolder,'package.json');c.rnCliConfigPath=_path.default.join(c.projectRootFolder,_constants.RN_CLI_CONFIG_NAME);c.babelConfigPath=_path.default.join(c.projectRootFolder,_constants.RN_BABEL_CONFIG_NAME);c.projectConfigFolder=_path.default.join(c.projectRootFolder,'projectConfig');c.projectPluginsFolder=_path.default.join(c.projectConfigFolder,'plugins');var hasProjectConfigInCurrentDir=_fs.default.existsSync(c.projectConfigPath);if(hasProjectConfigInCurrentDir){c.projectConfig=JSON.parse(_fs.default.readFileSync(c.projectConfigPath).toString());c.defaultPorts=(0,_extends2.default)(_constants.DEFAULT_PORTS,c.projectConfig.defaultPorts);c.globalConfigFolder=_getPath(c,c.projectConfig.globalConfigFolder,'globalConfigFolder',c.globalConfigFolder);c.globalConfigPath=_path.default.join(c.globalConfigFolder,_constants.RNV_GLOBAL_CONFIG_NAME);c.appConfigsFolder=_getPath(c,c.projectConfig.appConfigsFolder,'appConfigsFolder',c.appConfigsFolder);c.platformTemplatesFolder=_getPath(c,c.projectConfig.platformTemplatesFolder,'platformTemplatesFolder',c.platformTemplatesFolder);c.platformAssetsFolder=_getPath(c,c.projectConfig.platformAssetsFolder,'platformAssetsFolder',c.platformAssetsFolder);c.platformBuildsFolder=_getPath(c,c.projectConfig.platformBuildsFolder,'platformBuildsFolder',c.platformBuildsFolder);c.projectPluginsFolder=_getPath(c,c.projectConfig.projectPlugins,'projectPlugins',c.projectPluginsFolder);c.nodeModulesFolder=_path.default.join(c.projectRootFolder,'node_modules');c.runtimeConfigPath=_path.default.join(c.platformAssetsFolder,_constants.RNV_APP_CONFIG_NAME);c.projectConfigFolder=_getPath(c,c.projectConfig.projectConfigFolder,'projectConfigFolder',c.projectConfigFolder);c.pluginConfigPath=_path.default.join(c.projectConfigFolder,'plugins.json');c.permissionsConfigPath=_path.default.join(c.projectConfigFolder,'permissions.json');c.fontsConfigFolder=_path.default.join(c.projectConfigFolder,'fonts');}if(_currentJob==='target'||_currentJob==='log'){configureRnvGlobal(c).then(function(){return resolve(c);}).catch(function(e){return reject(e);});return;}if(!hasProjectConfigInCurrentDir){reject("Looks like this directory is not ReNativeproject. Project config "+_chalk.default.white(c.projectConfigPath)+" is missing!. You can create new project with "+_chalk.default.white('rnv app create'));}if(_currentJob==='platform'){configureRnvGlobal(c).then(function(){return resolve(c);}).catch(function(e){return reject(e);});return;}configureRnvGlobal(c).then(function(){return configureProject(c);}).then(function(){return configureNodeModules(c);}).then(function(){return configureApp(c);}).then(function(){return logAppInfo(c);}).then(function(){return resolve(c);}).catch(function(e){return reject(e);});});};exports.initializeBuilder=initializeBuilder;var logAppInfo=function logAppInfo(c){return new Promise(function(resolve,reject){console.log(_chalk.default.gray("\n"+LINE2+"\n\u2139\uFE0F  Current App Config: "+_chalk.default.white.bold(c.appConfigFile.id)+"\n"+LINE2));resolve();});};var configureProject=function configureProject(c){return new Promise(function(resolve,reject){logTask('configureProject');(0,_app.checkAndCreateProjectPackage)(c,'renative-app','ReNative App');c.projectPackage=JSON.parse(_fs.default.readFileSync(c.projectPackagePath).toString());c.defaultAppConfigId=c.projectPackage.defaultAppConfigId||_constants.SAMPLE_APP_ID;(0,_app.checkAndCreateGitignore)(c);logTask('configureProject:check rn-cli');if(!_fs.default.existsSync(c.rnCliConfigPath)){logWarning("Looks like your rn-cli config file "+_chalk.default.white(c.rnCliConfigPath)+" is missing! Let's create one for you.");(0,_fileutils.copyFileSync)(_path.default.join(c.rnvRootFolder,_constants.RN_CLI_CONFIG_NAME),c.rnCliConfigPath);}logTask('configureProject:check babel config');if(!_fs.default.existsSync(c.babelConfigPath)){logWarning("Looks like your babel config file "+_chalk.default.white(c.babelConfigPath)+" is missing! Let's create one for you.");(0,_fileutils.copyFileSync)(_path.default.join(c.rnvRootFolder,_constants.RN_BABEL_CONFIG_NAME),c.babelConfigPath);}logTask('configureProject:check src');if(!_fs.default.existsSync(c.projectSourceFolder)){logWarning("Looks like your src folder "+_chalk.default.white(c.projectSourceFolder)+" is missing! Let's create one for you.");(0,_fileutils.copyFolderContentsRecursiveSync)(_path.default.join(c.rnvRootFolder,'src'),c.projectSourceFolder);}logTask('configureProject:check appConfigs');_setAppConfig(c,_path.default.join(c.appConfigsFolder,c.defaultAppConfigId));if(!_fs.default.existsSync(c.appConfigsFolder)){logWarning("Looks like your appConfig folder "+_chalk.default.white(c.appConfigsFolder)+" is missing! Let's create sample config for you.");(0,_fileutils.copyFolderContentsRecursiveSync)(_path.default.join(c.rnvRootFolder,'appConfigs',_constants.SAMPLE_APP_ID),c.appConfigFolder);try{var appConfig=JSON.parse(_fs.default.readFileSync(c.appConfigPath).toString());appConfig.common.title=c.projectPackage.title;appConfig.common.id=c.projectPackage.defaultAppId;appConfig.id=c.defaultAppConfigId;appConfig.platforms.ios.teamID='';appConfig.platforms.tvos.teamID='';var supPlats=c.projectPackage.supportedPlatforms;if(supPlats){for(var pk in appConfig.platforms){if(!supPlats.includes(pk)){delete appConfig.platforms[pk];}}}_fs.default.writeFileSync(c.appConfigPath,JSON.stringify(appConfig,null,2));}catch(e){logError(e);}}logTask('configureProject:check rnv-config.local');if(_fs.default.existsSync(c.projectConfigLocalPath)){logInfo("Found "+_constants.RNV_PROJECT_CONFIG_LOCAL_NAME+" file in your project. will use it as preference for appConfig path!");c.projectConfigLocal=JSON.parse(_fs.default.readFileSync(c.projectConfigLocalPath).toString());if(c.projectConfigLocal.appConfigsPath){if(!_fs.default.existsSync(c.projectConfigLocal.appConfigsPath)){logWarning("Looks like your custom local appConfig is pointing to "+_chalk.default.white(c.projectConfigLocal.appConfigsPath)+" which doesn't exist! Make sure you create one in that location");}else{logInfo("Found custom appConfing location pointing to "+_chalk.default.white(c.projectConfigLocal.appConfigsPath)+". ReNativewill now swith to that location!");c.appConfigsFolder=c.projectConfigLocal.appConfigsPath;}}else{logWarning("Your local config file "+_chalk.default.white(c.projectConfigLocal.appConfigsPath)+" is missing appConfigsPath field!");}}logTask('configureProject:check projectConfigs');if(!_fs.default.existsSync(c.projectConfigFolder)){logWarning("Looks like your projectConfig folder "+_chalk.default.white(c.projectConfigFolder)+" is missing! Let's create one for you.");(0,_fileutils.copyFolderContentsRecursiveSync)(_path.default.join(c.rnvRootFolder,'projectConfig'),c.projectConfigFolder);}logTask('configureProject:check plugins');if(_fs.default.existsSync(c.pluginConfigPath)){c.pluginConfig=JSON.parse(_fs.default.readFileSync(c.pluginConfigPath).toString());}else{logWarning("Looks like your plugin config is missing from "+_chalk.default.white(c.pluginConfigPath)+". let's create one for you!");c.pluginConfig={plugins:{}};_fs.default.writeFileSync(c.pluginConfigPath,JSON.stringify(c.pluginConfig,null,2));}if(!c.projectPackage.dependencies){c.projectPackage.dependencies={};}var hasPackageChanged=false;for(var k in c.pluginConfig.plugins){var dependencies=c.projectPackage.dependencies;var devDependecies=c.projectPackage.devDependecies;var plugin=c.pluginConfig.plugins[k];if(dependencies&&dependencies[k]){if(plugin['no-active']!==true&&plugin['no-npm']!==true&&dependencies[k]!==plugin.version){logWarning("Version mismatch of dependency "+_chalk.default.white(k)+" between package.json: v("+_chalk.default.red(dependencies[k])+") and plugins.json: v("+_chalk.default.red(plugin.version)+"). package.json will be overriden");hasPackageChanged=true;dependencies[k]=plugin.version;}}else if(devDependecies&&devDependecies[k]){if(plugin['no-active']!==true&&plugin['no-npm']!==true&&devDependecies[k]!==plugin.version){logWarning("Version mismatch of devDependency "+_chalk.default.white(k)+" between package.json: v("+_chalk.default.red(devDependecies[k])+") and plugins.json: v("+_chalk.default.red(plugin.version)+"). package.json will be overriden");hasPackageChanged=true;devDependecies[k]=plugin.version;}}else if(plugin['no-active']!==true&&plugin['no-npm']!==true){logWarning("Missing dependency "+_chalk.default.white(k)+" v("+_chalk.default.red(plugin.version)+") in package.json. package.json will be overriden");hasPackageChanged=true;dependencies[k]=plugin.version;}}if(hasPackageChanged){_fs.default.writeFileSync(c.projectPackagePath,JSON.stringify(c.projectPackage,null,2));c._requiresNpmInstall=true;}logTask('configureProject:check permissions');if(_fs.default.existsSync(c.permissionsConfigPath)){c.permissionsConfig=JSON.parse(_fs.default.readFileSync(c.permissionsConfigPath).toString());}else{var newPath=_path.default.join(c.rnvRootFolder,'projectConfig/permissions.json');logWarning("Looks like your permission config is missing from "+_chalk.default.white(c.permissionsConfigPath)+". ReNativeDefault "+_chalk.default.white(newPath)+" will be used instead");c.permissionsConfigPath=newPath;c.permissionsConfig=JSON.parse(_fs.default.readFileSync(c.permissionsConfigPath).toString());}resolve();});};var configureNodeModules=function configureNodeModules(c){return new Promise(function(resolve,reject){logTask('configureNodeModules');if(!_fs.default.existsSync(c.nodeModulesFolder)||c._requiresNpmInstall){if(!_fs.default.existsSync(c.nodeModulesFolder)){logWarning("Looks like your node_modules folder "+_chalk.default.white(c.nodeModulesFolder)+" is missing! Let's run "+_chalk.default.white('npm install')+" first!");}else{logWarning("Looks like your node_modules out of date! Let's run "+_chalk.default.white('npm install')+" first!");}(0,_exec.executeAsync)('npm',['install']).then(function(){resolve();}).catch(function(error){return logError(error);});}else{resolve();}});};var configureRnvGlobal=function configureRnvGlobal(c){return new Promise(function(resolve,reject){logTask('configureRnvGlobal');if(_fs.default.existsSync(c.globalConfigFolder)){console.log(c.globalConfigFolder+" folder exists!");}else{console.log(c.globalConfigFolder+" folder missing! Creating one for you...");(0,_fileutils.mkdirSync)(c.globalConfigFolder);}if(_fs.default.existsSync(c.globalConfigPath)){console.log(c.globalConfigFolder+"/"+_constants.RNV_GLOBAL_CONFIG_NAME+" file exists!");}else{console.log(c.globalConfigFolder+"/"+_constants.RNV_GLOBAL_CONFIG_NAME+" file missing! Creating one for you...");(0,_fileutils.copyFileSync)(_path.default.join(c.rnvHomeFolder,'supportFiles',_constants.RNV_GLOBAL_CONFIG_NAME),c.globalConfigPath);console.log("Don't forget to Edit: "+c.globalConfigFolder+"/"+_constants.RNV_GLOBAL_CONFIG_NAME+" with correct paths to your SDKs before continuing!");}if(_fs.default.existsSync(c.globalConfigPath)){c.globalConfig=JSON.parse(_fs.default.readFileSync(c.globalConfigPath).toString());if(c.globalConfig.appConfigsPath){if(!_fs.default.existsSync(c.globalConfig.appConfigsPath)){logWarning("Looks like your custom global appConfig is pointing to "+_chalk.default.white(c.globalConfig.appConfigsPath)+" which doesn't exist! Make sure you create one in that location");}else{logInfo("Found custom appConfing location pointing to "+_chalk.default.white(c.globalConfig.appConfigsPath)+". ReNativewill now swith to that location!");c.appConfigsFolder=c.globalConfig.appConfigsPath;}}c.cli[_constants.CLI_ANDROID_EMULATOR]=_path.default.join(c.globalConfig.sdks.ANDROID_SDK,'tools/emulator');c.cli[_constants.CLI_ANDROID_ADB]=_path.default.join(c.globalConfig.sdks.ANDROID_SDK,'platform-tools/adb');c.cli[_constants.CLI_ANDROID_AVDMANAGER]=_path.default.join(c.globalConfig.sdks.ANDROID_SDK,'tools/bin/avdmanager');c.cli[_constants.CLI_ANDROID_SDKMANAGER]=_path.default.join(c.globalConfig.sdks.ANDROID_SDK,'tools/bin/sdkmanager');c.cli[_constants.CLI_TIZEN_EMULATOR]=_path.default.join(c.globalConfig.sdks.TIZEN_SDK,'tools/emulator/bin/em-cli');c.cli[_constants.CLI_TIZEN]=_path.default.join(c.globalConfig.sdks.TIZEN_SDK,'tools/ide/bin/tizen');c.cli[_constants.CLI_WEBOS_ARES]=_path.default.join(c.globalConfig.sdks.WEBOS_SDK,'CLI/bin/ares');c.cli[_constants.CLI_WEBOS_ARES_PACKAGE]=_path.default.join(c.globalConfig.sdks.WEBOS_SDK,'CLI/bin/ares-package');c.cli[_constants.CLI_WEBBOS_ARES_INSTALL]=_path.default.join(c.globalConfig.sdks.WEBOS_SDK,'CLI/bin/ares-install');c.cli[_constants.CLI_WEBBOS_ARES_LAUNCH]=_path.default.join(c.globalConfig.sdks.WEBOS_SDK,'CLI/bin/ares-launch');if(c.globalConfig.defaultTargets===undefined){logWarning("Looks like you're missing defaultTargets in your config "+_chalk.default.white(c.globalConfigPath)+". Let's add them!");var defaultConfig=JSON.parse(_fs.default.readFileSync(_path.default.join(c.rnvHomeFolder,'supportFiles',_constants.RNV_GLOBAL_CONFIG_NAME)).toString());var newConfig=(0,_objectSpread2.default)({},c.globalConfig,{defaultTargets:defaultConfig.defaultTargets});_fs.default.writeFileSync(c.globalConfigPath,JSON.stringify(newConfig,null,2));}}resolve();});};var configureEntryPoints=function configureEntryPoints(c){var p=c.appConfigFile.platforms;for(var k in p){platform=p[k];var source=_path.default.join(c.rnvRootFolder,platform.entryFile+".js");var dest=_path.default.join(c.projectRootFolder,platform.entryFile+".js");if(!_fs.default.existsSync(dest)){logWarning("You missing entry file "+_chalk.default.white(platform.entryFile)+" in your project. let's create one for you!");(0,_fileutils.copyFileSync)(source,dest);}}};var configureApp=function configureApp(c){return new Promise(function(resolve,reject){logTask('configureApp');if(c.appID){_getConfig(c,c.appID).then(function(){configureEntryPoints(c);resolve(c);}).catch(function(e){return reject(e);});}else{if(!_fs.default.existsSync(c.runtimeConfigPath)){logWarning("Seems like you're missing "+c.runtimeConfigPath+" file. But don't worry. ReNativegot you covered. Let's configure it for you!");_getConfig(c,c.defaultAppConfigId).then(function(){configureEntryPoints(c);var newCommand=(0,_extends2.default)({},c);newCommand.subCommand='configure';newCommand.program={appConfig:c.defaultAppConfigId,update:true,platform:c.program.platform,scheme:c.program.scheme};(0,_app.default)(newCommand).then(function(){return resolve(c);}).catch(function(e){return reject(e);});}).catch(function(e){return reject(e);});}else{try{var assetConfig=JSON.parse(_fs.default.readFileSync(c.runtimeConfigPath).toString());_getConfig(c,assetConfig.id).then(function(){configureEntryPoints(c);resolve(c);}).catch(function(e){return reject(e);});}catch(e){reject(e);}}}});};var isSdkInstalled=function isSdkInstalled(c,platform){logTask("isSdkInstalled: "+platform);if(c.globalConfig){var sdkPlatform=SDK_PLATFORMS[platform];if(sdkPlatform)return _fs.default.existsSync(c.globalConfig.sdks[sdkPlatform]);}return false;};exports.isSdkInstalled=isSdkInstalled;var checkSdk=function checkSdk(c,platform,reject){if(!isSdkInstalled(c,platform)){reject(platform+" requires SDK to be installed. check your ~/.rnv/config.json file if you SDK path is correct");return false;}return true;};exports.checkSdk=checkSdk;var logTask=function logTask(task){console.log(_chalk.default.green("\n"+RNV+" "+_currentJob+" - "+task+" - Starting!"));};exports.logTask=logTask;var logWarning=function logWarning(msg){console.log(_chalk.default.yellow("\n"+RNV+" "+_currentJob+" - WARNING: "+msg));};exports.logWarning=logWarning;var logInfo=function logInfo(msg){console.log(_chalk.default.magenta("\n"+RNV+" "+_currentJob+" - NOTE: "+msg));};exports.logInfo=logInfo;var logDebug=function logDebug(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}if(_isInfoEnabled)console.log.apply(null,args);};exports.logDebug=logDebug;var logComplete=function logComplete(){var isEnd=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;console.log(_chalk.default.white.bold("\n "+RNV+" "+(_currentJob||'')+" - Done! \uD83D\uDE80"));if(isEnd)logEnd(0);};exports.logComplete=logComplete;var logSuccess=function logSuccess(msg){console.log("\n \u2705 "+_chalk.default.magenta(msg));};exports.logSuccess=logSuccess;var getQuestion=function getQuestion(msg){return _chalk.default.blue("\n \u2753 "+msg+": ");};exports.getQuestion=getQuestion;var logError=function logError(e){var isEnd=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;console.log(_chalk.default.red.bold("\n"+RNV+" "+_currentJob+" - ERRROR! "+e));if(isEnd)logEnd(1);};exports.logError=logError;var logEnd=function logEnd(code){console.log(_chalk.default.bold("\n"+LINE+"\n"));_currentProcess.exit(code);};exports.logEnd=logEnd;var IGNORE_FOLDERS=['.git'];var _getConfig=function _getConfig(c,appConfigId){return new Promise(function(resolve,reject){logTask("_getConfig:"+appConfigId);_setAppConfig(c,_path.default.join(c.appConfigsFolder,appConfigId));c.appId=appConfigId;if(!_fs.default.existsSync(c.appConfigFolder)){var readline=require('readline').createInterface({input:process.stdin,output:process.stdout});var configDirs=[];_fs.default.readdirSync(c.appConfigsFolder).forEach(function(dir){if(!IGNORE_FOLDERS.includes(dir)&&_fs.default.lstatSync(_path.default.join(c.appConfigsFolder,dir)).isDirectory()){configDirs.push(dir);}});logWarning("It seems you don't have appConfig named "+_chalk.default.white(appConfigId)+" present in your config folder: "+_chalk.default.white(c.appConfigsFolder)+" !");if(configDirs.length){var opts='';configDirs.forEach(function(v,i){opts+="("+_chalk.default.white(i)+") "+_chalk.default.white(v)+"\n";});readline.question(getQuestion("ReNative found existing appConfigs. which one would you like to pick (pick number)?:\n"+opts),function(v){if(configDirs[v]){c.defaultAppConfigId=configDirs[v];c.appId=c.defaultAppConfigId;_setAppConfig(c,_path.default.join(c.appConfigsFolder,c.defaultAppConfigId));_configureConfig(c).then(function(){return resolve();}).catch(function(e){return reject(e);});}else{reject('Wrong option!');}});}else{readline.question(getQuestion("Do you want ReNative to create new sample appConfig ("+_chalk.default.white(appConfigId)+") for you? (y) to confirm"),function(v){c.defaultAppConfigId=_constants.SAMPLE_APP_ID;_setAppConfig(c,_path.default.join(c.appConfigsFolder,c.defaultAppConfigId));(0,_fileutils.copyFolderContentsRecursiveSync)(_path.default.join(c.rnvRootFolder,'appConfigs',c.defaultAppConfigId),_path.default.join(c.appConfigFolder));_configureConfig(c).then(function(){return resolve();}).catch(function(e){return reject(e);});});}}else{_configureConfig(c).then(function(){return resolve();}).catch(function(e){return reject(e);});}});};var _configureConfig=function _configureConfig(c){return new Promise(function(resolve,reject){logTask("_configureConfig:"+c.appId);c.appConfigFile=JSON.parse(_fs.default.readFileSync(c.appConfigPath).toString());var merge=require('deepmerge');try{if(c.appConfigFile.extend){var parentAppConfigFolder=_path.default.join(c.appConfigsFolder,c.appConfigFile.extend);if(_fs.default.existsSync(parentAppConfigFolder)){var parentAppConfigPath=_path.default.join(parentAppConfigFolder,_constants.RNV_APP_CONFIG_NAME);var parentAppConfigFile=JSON.parse(_fs.default.readFileSync(parentAppConfigPath).toString());var mergedAppConfigFile=merge(parentAppConfigFile,c.appConfigFile);c.appConfigFile=mergedAppConfigFile;_setAppConfig(c,parentAppConfigFolder);}}resolve();}catch(e){reject(e);}});};var getAppFolder=function getAppFolder(c,platform){return _path.default.join(c.platformBuildsFolder,c.appId+"_"+platform);};exports.getAppFolder=getAppFolder;var getAppTemplateFolder=function getAppTemplateFolder(c,platform){return _path.default.join(c.platformTemplatesFolder,""+platform);};exports.getAppTemplateFolder=getAppTemplateFolder;var getAppConfigId=function getAppConfigId(c,platform){return c.appConfigFile.id;};exports.getAppConfigId=getAppConfigId;var getConfigProp=function getConfigProp(c,platform,key){var p=c.appConfigFile.platforms[platform];var ps=_getScheme(c);var scheme;scheme=p.buildSchemes?p.buildSchemes[ps]:null;scheme=scheme||{};var result=scheme[key]||c.appConfigFile.platforms[platform][key]||c.appConfigFile.common[key];logTask("getConfigProp:"+platform+":"+key+":"+result);return result;};exports.getConfigProp=getConfigProp;var getAppId=function getAppId(c,platform){return getConfigProp(c,platform,'id');};exports.getAppId=getAppId;var getAppTitle=function getAppTitle(c,platform){return getConfigProp(c,platform,'title');};exports.getAppTitle=getAppTitle;var getAppVersion=function getAppVersion(c,platform){return c.appConfigFile.platforms[platform].version||c.appConfigFile.common.verion||c.projectPackage.version;};exports.getAppVersion=getAppVersion;var getAppAuthor=function getAppAuthor(c,platform){return c.appConfigFile.platforms[platform].author||c.appConfigFile.common.author||c.projectPackage.author;};exports.getAppAuthor=getAppAuthor;var getAppLicense=function getAppLicense(c,platform){return c.appConfigFile.platforms[platform].license||c.appConfigFile.common.license||c.projectPackage.license;};exports.getAppLicense=getAppLicense;var getEntryFile=function getEntryFile(c,platform){return c.appConfigFile.platforms[platform].entryFile;};exports.getEntryFile=getEntryFile;var getAppDescription=function getAppDescription(c,platform){return c.appConfigFile.platforms[platform].description||c.appConfigFile.common.description||c.projectPackage.description;};exports.getAppDescription=getAppDescription;var getAppVersionCode=function getAppVersionCode(c,platform){if(c.appConfigFile.platforms[platform].versionCode){return c.appConfigFile.platforms[platform].versionCode;}if(c.appConfigFile.common.verionCode){return c.appConfigFile.common.verionCode;}var version=getAppVersion(c,platform);var vc='';version.split('-')[0].split('.').forEach(function(v){vc+=v.length>1?v:"0"+v;});return Number(vc).toString();};exports.getAppVersionCode=getAppVersionCode;var logErrorPlatform=function logErrorPlatform(platform,resolve){logError("Platform: "+_chalk.default.white(platform)+" doesn't support command: "+_chalk.default.bold(_currentJob));resolve();};exports.logErrorPlatform=logErrorPlatform;var isPlatformActive=function isPlatformActive(c,platform,resolve){if(!c.appConfigFile||!c.appConfigFile.platforms){logError("Looks like your appConfigFile is not configured properly! check "+_chalk.default.white(c.appConfigPath)+" location.");if(resolve)resolve();return false;}if(!c.appConfigFile.platforms[platform]){console.log("Platform "+platform+" not configured for "+c.appId+". skipping.");if(resolve)resolve();return false;}return true;};exports.isPlatformActive=isPlatformActive;var configureIfRequired=function configureIfRequired(c,platform){return new Promise(function(resolve,reject){logTask("_configureIfRequired:"+platform);var newCommand=(0,_extends2.default)({},c);newCommand.subCommand='configure';newCommand.program={appConfig:c.id,update:false,platform:platform,scheme:c.program.scheme};if(c.program.reset){(0,_platform.cleanPlatformBuild)(c,platform).then(function(){return(0,_platform.createPlatformBuild)(c,platform);}).then(function(){return(0,_app.default)(newCommand);}).then(function(){return resolve(c);}).catch(function(e){return reject(e);});}else{(0,_platform.createPlatformBuild)(c,platform).then(function(){return(0,_app.default)(newCommand);}).then(function(){return resolve(c);}).catch(function(e){return reject(e);});}});};exports.configureIfRequired=configureIfRequired;var writeCleanFile=function writeCleanFile(source,destination,overrides){if(!_fs.default.existsSync(source)){logError("Cannot write file. source path doesn't exists: "+source);return;}if(!_fs.default.existsSync(destination)){logWarning("destination path doesn't exists: "+destination+". will create new one");}var pFile=_fs.default.readFileSync(source,'utf8');var pFileClean=pFile;overrides.forEach(function(v){var regEx=new RegExp(v.pattern,'g');pFileClean=pFileClean.replace(regEx,v.override);});_fs.default.writeFileSync(destination,pFileClean,'utf8');};exports.writeCleanFile=writeCleanFile;var copyBuildsFolder=function copyBuildsFolder(c,platform){return new Promise(function(resolve,reject){logTask("copyBuildsFolder:"+platform);if(!isPlatformActive(c,platform,resolve))return;var destPath=_path.default.join(getAppFolder(c,platform));var sourcePath=_getBuildsFolder(c,platform);(0,_fileutils.copyFolderContentsRecursiveSync)(sourcePath,destPath);resolve();});};exports.copyBuildsFolder=copyBuildsFolder;var _getScheme=function _getScheme(c){return c.program.scheme||'debug';};var _getBuildsFolder=function _getBuildsFolder(c,platform){var p=_path.default.join(c.appConfigFolder,"builds/"+platform+"@"+_getScheme(c));if(_fs.default.existsSync(p))return p;return _path.default.join(c.appConfigFolder,"builds/"+platform);};var getIP=function getIP(){var ip=require('ip');return ip.address();};exports.getIP=getIP;var _setAppConfig=function _setAppConfig(c,p){c.appConfigFolder=p;c.appConfigPath=_path.default.join(p,_constants.RNV_APP_CONFIG_NAME);};var cleanPlatformIfRequired=function cleanPlatformIfRequired(c,platform){return new Promise(function(resolve,reject){if(c.program.reset){logWarning("You passed "+_chalk.default.white('-r')+" argument. paltform "+_chalk.default.white(platform)+" will be cleaned up first!");(0,_platform.cleanPlatformBuild)(c,platform).then(function(){return resolve(c);}).catch(function(e){return reject(e);});}else{resolve();}});};exports.cleanPlatformIfRequired=cleanPlatformIfRequired;var checkPortInUse=function checkPortInUse(c,platform,port){return new Promise(function(resolve,reject){(0,_detectPort.default)(port,function(err,availablePort){if(err){reject(err);return;}resolve(port!==availablePort);});});};exports.checkPortInUse=checkPortInUse;var _currentQuestion;var askQuestion=function askQuestion(question){return new Promise(function(resolve,reject){if(!_currentQuestion){_currentQuestion=require('readline').createInterface({input:process.stdin,output:process.stdout});}_currentQuestion.question(getQuestion(question),function(v){resolve(v);});});};exports.askQuestion=askQuestion;var finishQuestion=function finishQuestion(){return new Promise(function(resolve,reject){_currentQuestion.close();});};exports.finishQuestion=finishQuestion;var _default={SUPPORTED_PLATFORMS:SUPPORTED_PLATFORMS,copyBuildsFolder:copyBuildsFolder,isPlatformSupported:isPlatformSupported,isPlatformSupportedSync:isPlatformSupportedSync,getAppFolder:getAppFolder,getAppTemplateFolder:getAppTemplateFolder,logTask:logTask,logComplete:logComplete,logError:logError,initializeBuilder:initializeBuilder,logDebug:logDebug,logInfo:logInfo,logErrorPlatform:logErrorPlatform,isPlatformActive:isPlatformActive,isSdkInstalled:isSdkInstalled,checkSdk:checkSdk,logEnd:logEnd,logWarning:logWarning,configureIfRequired:configureIfRequired,getAppId:getAppId,getAppTitle:getAppTitle,getAppVersion:getAppVersion,getAppVersionCode:getAppVersionCode,writeCleanFile:writeCleanFile,getEntryFile:getEntryFile,getAppConfigId:getAppConfigId,getAppDescription:getAppDescription,getAppAuthor:getAppAuthor,getAppLicense:getAppLicense,getQuestion:getQuestion,logSuccess:logSuccess,getConfigProp:getConfigProp,getIP:getIP,cleanPlatformIfRequired:cleanPlatformIfRequired,checkPortInUse:checkPortInUse,finishQuestion:finishQuestion,askQuestion:askQuestion,IOS:_constants.IOS,ANDROID:_constants.ANDROID,ANDROID_TV:_constants.ANDROID_TV,ANDROID_WEAR:_constants.ANDROID_WEAR,WEB:_constants.WEB,TIZEN:_constants.TIZEN,TVOS:_constants.TVOS,WEBOS:_constants.WEBOS,MACOS:_constants.MACOS,WINDOWS:_constants.WINDOWS,TIZEN_WATCH:_constants.TIZEN_WATCH,CLI_ANDROID_EMULATOR:_constants.CLI_ANDROID_EMULATOR,CLI_ANDROID_ADB:_constants.CLI_ANDROID_ADB,CLI_TIZEN_EMULATOR:_constants.CLI_TIZEN_EMULATOR,CLI_TIZEN:_constants.CLI_TIZEN,CLI_WEBOS_ARES:_constants.CLI_WEBOS_ARES,CLI_WEBOS_ARES_PACKAGE:_constants.CLI_WEBOS_ARES_PACKAGE,CLI_WEBBOS_ARES_INSTALL:_constants.CLI_WEBBOS_ARES_INSTALL,CLI_WEBBOS_ARES_LAUNCH:_constants.CLI_WEBBOS_ARES_LAUNCH,FORM_FACTOR_MOBILE:_constants.FORM_FACTOR_MOBILE,FORM_FACTOR_DESKTOP:_constants.FORM_FACTOR_DESKTOP,FORM_FACTOR_WATCH:_constants.FORM_FACTOR_WATCH,FORM_FACTOR_TV:_constants.FORM_FACTOR_TV};exports.default=_default;