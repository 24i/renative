var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.prepareXcodeProject=exports.runAppleLog=exports.launchAppleSimulator=exports.listAppleDevices=exports.packageBundleForXcode=exports.archiveXcodeProject=exports.exportXcodeProject=exports.runXcodeProject=exports.configureXcodeProject=exports.copyAppleAssets=exports.runPod=void 0;var _path=_interopRequireDefault(require("path"));var _fs=_interopRequireDefault(require("fs"));var _chalk=_interopRequireDefault(require("chalk"));var _exec=require("../exec");var _platform=require("../cli/platform");var _common=require("../common");var _constants=require("../constants");var _fileutils=require("../fileutils");var child_process=require('child_process');var xcode=require('xcode');var checkIfCommandExists=function checkIfCommandExists(command){return new Promise(function(resolve,reject){return child_process.exec("command -v "+command+" 2>/dev/null",function(error){if(error)return reject(new Error(command+" not installed"));return resolve();});});};var runPod=function runPod(command,cwd){var rejectOnFail=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;return new Promise(function(resolve,reject){(0,_common.logTask)("runPod:"+command);if(!_fs.default.existsSync(cwd)){(0,_common.logError)("Location "+cwd+" does not exists!");if(rejectOnFail)return reject();return resolve();}return checkIfCommandExists('pod').then(function(){return(0,_exec.executeAsync)('pod',[command],{cwd:cwd,evn:process.env,stdio:'inherit'}).then(function(){return resolve();}).catch(function(e){(0,_common.logError)(e);if(rejectOnFail)return reject(e);return resolve();});}).catch(function(err){return(0,_common.logError)(err);});});};exports.runPod=runPod;var copyAppleAssets=function copyAppleAssets(c,platform,appFolderName){return new Promise(function(resolve,reject){(0,_common.logTask)('copyAppleAssets');if(!(0,_common.isPlatformActive)(c,platform,resolve))return;var iosPath=_path.default.join((0,_common.getAppFolder)(c,platform),appFolderName);var sPath=_path.default.join(c.appConfigFolder,"assets/"+platform);(0,_fileutils.copyFolderContentsRecursiveSync)(sPath,iosPath);resolve();});};exports.copyAppleAssets=copyAppleAssets;var runXcodeProject=function runXcodeProject(c,platform,target){return new Promise(function(resolve,reject){(0,_common.logTask)("runXcodeProject:"+platform+":"+target);if(target==='?'){launchAppleSimulator(c,platform,target).then(function(newTarget){_runXcodeProject(c,platform,newTarget).then(function(){return resolve();}).catch(function(e){return reject(e);});});}else{_runXcodeProject(c,platform,target).then(function(){return resolve();}).catch(function(e){return reject(e);});}});};exports.runXcodeProject=runXcodeProject;var _runXcodeProject=function _runXcodeProject(c,platform,target){return new Promise(function(resolve,reject){(0,_common.logTask)("_runXcodeProject:"+platform+":"+target);var appPath=(0,_common.getAppFolder)(c,platform);var device=c.program.device;var appFolderName=_getAppFolderName(c,platform);var scheme=(0,_common.getConfigProp)(c,platform,'scheme');var runScheme=(0,_common.getConfigProp)(c,platform,'runScheme');var bundleIsDev=(0,_common.getConfigProp)(c,platform,'bundleIsDev')===true;var bundleAssets=(0,_common.getConfigProp)(c,platform,'bundleAssets')===true;var p;if(!scheme){reject("You missing scheme in platforms."+_chalk.default.yellow(platform)+" in your "+_chalk.default.white(c.appConfigPath)+"! Check example config for more info:  "+_chalk.default.blue('https://github.com/pavjacko/renative/blob/master/appConfigs/helloWorld/config.json')+" ");return;}if(device===true){var devicesArr=_getAppleDevices(c,platform,false,true);if(devicesArr.length===1){(0,_common.logSuccess)("Found one device connected! "+_chalk.default.white(devicesArr[0].name));p=['run-ios','--project-path',appPath,'--device',devicesArr[0].name,'--scheme',scheme,'--configuration',runScheme];}else if(devicesArr.length>1){var devicesString='\n';devicesArr.forEach(function(v,i){devicesString+="-["+(i+1)+"] "+_chalk.default.white(v.name)+" | v: "+_chalk.default.green(v.version)+" | udid: "+_chalk.default.blue(v.udid)+(v.isDevice?_chalk.default.red(' (device)'):'')+"\n";});var readline=require('readline').createInterface({input:process.stdin,output:process.stdout});readline.question((0,_common.getQuestion)(devicesString+"\nType number of the device you want to launch"),function(v){var selectedDevice=devicesArr[parseInt(v,10)-1];if(selectedDevice){p=['run-ios','--project-path',appPath,'--device',selectedDevice.name,'--scheme',scheme,'--configuration',runScheme];if(bundleAssets){packageBundleForXcode(c,platform,bundleIsDev).then(function(v){return(0,_exec.executeAsync)('react-native',p);}).then(function(){return resolve();}).catch(function(e){return reject(e);});}else{(0,_exec.executeAsync)('react-native',p).then(function(){return resolve();}).catch(function(e){return reject(e);});}}else{reject("Wrong choice "+v+"! Ingoring");}});return;}else{reject("No "+platform+" devices connected!");return;}}else if(device){p=['run-ios','--project-path',appPath,'--device',device,'--scheme',scheme,'--configuration',runScheme];}else{p=['run-ios','--project-path',appPath,'--simulator',target,'--scheme',scheme,'--configuration',runScheme];}(0,_common.logDebug)('running',p);if(p){if(bundleAssets){packageBundleForXcode(c,platform,bundleIsDev).then(function(v){return(0,_exec.executeAsync)('react-native',p);}).then(function(){return resolve();}).catch(function(e){return reject(e);});}else{(0,_exec.executeAsync)('react-native',p).then(function(){return resolve();}).catch(function(e){return reject(e);});}}else{reject('Missing options for react-native command!');}});};var archiveXcodeProject=function archiveXcodeProject(c,platform){return new Promise(function(resolve,reject){(0,_common.logTask)("archiveXcodeProject:"+platform);var appFolderName=_getAppFolderName(c,platform);var sdk=platform===_constants.IOS?'iphoneos':'tvos';var appPath=(0,_common.getAppFolder)(c,platform);var appFolder=(0,_common.getAppFolder)(c,platform);var exportPath=_path.default.join(appPath,'release');var scheme=(0,_common.getConfigProp)(c,platform,'scheme');var bundleIsDev=(0,_common.getConfigProp)(c,platform,'bundleIsDev')===true;var p=['-workspace',appPath+"/"+appFolderName+".xcworkspace",'-scheme',scheme,'-sdk',sdk,'-configuration','Release','archive','-archivePath',exportPath+"/"+scheme+".xcarchive",'-allowProvisioningUpdates'];(0,_common.logDebug)('running',p);if(c.appConfigFile.platforms[platform].runScheme==='Release'){packageBundleForXcode(c,platform,bundleIsDev).then(function(){return(0,_exec.executeAsync)('xcodebuild',p);}).then(function(){return resolve();}).catch(function(e){return reject(e);});}else{(0,_exec.executeAsync)('xcodebuild',p).then(function(){return resolve();}).catch(function(e){return reject(e);});}});};exports.archiveXcodeProject=archiveXcodeProject;var exportXcodeProject=function exportXcodeProject(c,platform){return new Promise(function(resolve,reject){(0,_common.logTask)("exportXcodeProject:"+platform);var appPath=(0,_common.getAppFolder)(c,platform);var exportPath=_path.default.join(appPath,'release');var scheme=(0,_common.getConfigProp)(c,platform,'scheme');var p=['-exportArchive','-archivePath',exportPath+"/"+scheme+".xcarchive",'-exportOptionsPlist',appPath+"/exportOptions.plist",'-exportPath',""+exportPath,'-allowProvisioningUpdates'];(0,_common.logDebug)('running',p);(0,_exec.executeAsync)('xcodebuild',p).then(function(){(0,_common.logSuccess)("Your IPA is located in "+_chalk.default.white(exportPath)+".");resolve();}).catch(function(e){return reject(e);});});};exports.exportXcodeProject=exportXcodeProject;var packageBundleForXcode=function packageBundleForXcode(c,platform){var isDev=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;(0,_common.logTask)("packageBundleForXcode:"+platform);var appFolderName=_getAppFolderName(c,platform);var appPath=_path.default.join((0,_common.getAppFolder)(c,platform),appFolderName);return(0,_exec.executeAsync)('react-native',['bundle','--platform','ios','--dev',isDev,'--assets-dest',"platformBuilds/"+c.appId+"_"+platform,'--entry-file',c.appConfigFile.platforms[platform].entryFile+".js",'--bundle-output',(0,_common.getAppFolder)(c,platform)+"/main.jsbundle"]);};exports.packageBundleForXcode=packageBundleForXcode;var prepareXcodeProject=function prepareXcodeProject(c,platform){return new Promise(function(resolve,reject){var device=c.program.device;var ip=device?(0,_common.getIP)():'localhost';var appFolder=(0,_common.getAppFolder)(c,platform);var appFolderName=_getAppFolderName(c,platform);var bundleAssets=(0,_common.getConfigProp)(c,platform,'bundleAssets')===true;var tId=(0,_common.getConfigProp)(c,platform,'teamID');if(device&&(!tId||tId==='')){(0,_common.logError)("Looks like you're missing teamID in your "+_chalk.default.white(c.appConfigPath)+" => .platforms."+platform+".teamID . you will not be able to build "+platform+" app for device!");resolve();return;}var check=_path.default.join(appFolder,appFolderName+".xcodeproj");if(!_fs.default.existsSync(check)){(0,_common.logWarning)("Looks like your "+_chalk.default.white(platform)+" platformBuild is misconfigured!. let's repair it.");(0,_platform.createPlatformBuild)(c,platform).then(function(){return configureXcodeProject(c,platform);}).then(function(){return _postConfigureProject(c,platform,appFolder,appFolderName,bundleAssets,ip);}).then(function(){return resolve(c);}).catch(function(e){return reject(e);});return;}if(!_fs.default.existsSync(_path.default.join(appFolder,'Pods'))){(0,_common.logWarning)("Looks like your "+platform+" project is not configured yet. Let's configure it!");configureXcodeProject(c,platform).then(function(){return _postConfigureProject(c,platform,appFolder,appFolderName,bundleAssets,ip);}).then(function(){return resolve(c);}).catch(function(e){return reject(e);});}else{_postConfigureProject(c,platform,appFolder,appFolderName,bundleAssets,ip).then(function(){return resolve(c);}).catch(function(e){return reject(e);});}});};exports.prepareXcodeProject=prepareXcodeProject;var configureXcodeProject=function configureXcodeProject(c,platform,ip,port){return new Promise(function(resolve,reject){(0,_common.logTask)('configureXcodeProject');if(process.platform!=='darwin')return;if(!(0,_common.isPlatformActive)(c,platform,resolve))return;var appFolderName=_getAppFolderName(c,platform);copyAppleAssets(c,platform,appFolderName).then(function(){return copyAppleAssets(c,platform,appFolderName);}).then(function(){return(0,_common.copyBuildsFolder)(c,platform);}).then(function(){return _preConfigureProject(c,platform,appFolderName,ip,port);}).then(function(){return runPod(c.program.update?'update':'install',(0,_common.getAppFolder)(c,platform),true);}).then(function(){return resolve();}).catch(function(e){if(!c.program.update){(0,_common.logWarning)("Looks like pod install is not enough! Let's try pod update! Error: "+e);runPod('update',(0,_common.getAppFolder)(c,platform)).then(function(){return _preConfigureProject(c,platform,appFolderName,ip,port);}).then(function(){return resolve();}).catch(function(e){return reject(e);});}else{reject(e);}});});};exports.configureXcodeProject=configureXcodeProject;var _injectPlugin=function _injectPlugin(c,plugin,key,pkg,pluginConfig){if(plugin.appDelegateImports instanceof Array){plugin.appDelegateImports.forEach(function(appDelegateImport){(0,_common.logTask)('appDelegateImports add');if(pluginConfig.pluginAppDelegateImports.indexOf(appDelegateImport)===-1){(0,_common.logTask)('appDelegateImports add ok');pluginConfig.pluginAppDelegateImports+="import "+appDelegateImport+"\n";}});}if(plugin.appDelegateMethods instanceof Array){pluginConfig.pluginAppDelegateMethods+=""+plugin.appDelegateMethods.join('\n    ');}};var _postConfigureProject=function _postConfigureProject(c,platform,appFolder,appFolderName){var isBundled=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;var ip=arguments.length>5&&arguments[5]!==undefined?arguments[5]:'localhost';var port=arguments.length>6&&arguments[6]!==undefined?arguments[6]:8081;return new Promise(function(resolve,reject){(0,_common.logTask)("_postConfigureProject:"+platform+":"+ip+":"+port);var appDelegate='AppDelegate.swift';var entryFile=(0,_common.getEntryFile)(c,platform);var appTemplateFolder=(0,_common.getAppTemplateFolder)(c,platform);var tId=(0,_common.getConfigProp)(c,platform,'teamID');var bundle;if(isBundled){bundle="RCTBundleURLProvider.sharedSettings().jsBundleURL(forBundleRoot: \""+entryFile+"\", fallbackResource: nil)";}else{bundle="URL(string: \"http://"+ip+":"+port+"/"+entryFile+".bundle?platform=ios\")";}var pluginAppDelegateImports='';var pluginAppDelegateMethods='';var pluginConfig={pluginAppDelegateImports:pluginAppDelegateImports,pluginAppDelegateMethods:pluginAppDelegateMethods};if(c.appConfigFile&&c.pluginConfig){var includedPlugins=c.appConfigFile.common.includedPlugins;var excludedPlugins=c.appConfigFile.common.excludedPlugins;if(includedPlugins){var plugins=c.pluginConfig.plugins;for(var key in plugins){if(includedPlugins.includes('*')||includedPlugins.includes(key)){var plugin=plugins[key][platform];if(plugin){if(plugins[key]['no-active']!==true){_injectPlugin(c,plugin,key,plugin.package,pluginConfig);}}}}}}(0,_common.writeCleanFile)(_path.default.join((0,_common.getAppTemplateFolder)(c,platform),appFolderName,appDelegate),_path.default.join(appFolder,appFolderName,appDelegate),[{pattern:'{{BUNDLE}}',override:bundle},{pattern:'{{ENTRY_FILE}}',override:entryFile},{pattern:'{{IP}}',override:ip},{pattern:'{{PORT}}',override:port},{pattern:'{{APPDELEGATE_IMPORTS}}',override:pluginConfig.pluginAppDelegateImports},{pattern:'{{APPDELEGATE_METHODS}}',override:pluginConfig.pluginAppDelegateMethods}]);(0,_common.writeCleanFile)(_path.default.join(appTemplateFolder,'exportOptions.plist'),_path.default.join(appFolder,'exportOptions.plist'),[{pattern:'{{TEAM_ID}}',override:tId}]);var projectPath=_path.default.join(appFolder,appFolderName+".xcodeproj/project.pbxproj");var xcodeProj=xcode.project(projectPath);xcodeProj.parse(function(err){var appId=(0,_common.getAppId)(c,platform);if(tId){xcodeProj.updateBuildProperty('DEVELOPMENT_TEAM',tId);}else{xcodeProj.updateBuildProperty('DEVELOPMENT_TEAM','""');}xcodeProj.updateBuildProperty('PRODUCT_BUNDLE_IDENTIFIER',appId);resolve();});});};var _preConfigureProject=function _preConfigureProject(c,platform,appFolderName){var ip=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'localhost';var port=arguments.length>4&&arguments[4]!==undefined?arguments[4]:8081;return new Promise(function(resolve,reject){(0,_common.logTask)("_preConfigureProject:"+platform+":"+appFolderName+":"+ip+":"+port);var appFolder=(0,_common.getAppFolder)(c,platform);var appTemplateFolder=(0,_common.getAppTemplateFolder)(c,platform);var tId=(0,_common.getConfigProp)(c,platform,'teamID');_fs.default.writeFileSync(_path.default.join(appFolder,'main.jsbundle'),'{}');(0,_fileutils.mkdirSync)(_path.default.join(appFolder,'assets'));(0,_fileutils.mkdirSync)(_path.default.join(appFolder,appFolderName+"/images"));var plistPath=_path.default.join(appFolder,appFolderName+"/Info.plist");var pluginInject='';if(c.appConfigFile&&c.pluginConfig){var includedPlugins=c.appConfigFile.common.includedPlugins;var excludedPlugins=c.appConfigFile.common.excludedPlugins;if(includedPlugins){var plugins=c.pluginConfig.plugins;for(var key in plugins){if(includedPlugins.includes('*')||includedPlugins.includes(key)){var plugin=plugins[key][platform];if(plugin){if(plugins[key]['no-active']!==true){var isNpm=plugins[key]['no-npm']!==true;if(isNpm){var podPath=plugin.path?"../../"+plugin.path:"../../node_modules/"+key;pluginInject+="  pod '"+plugin.podName+"', :path => '"+podPath+"'\n";}else if(plugin.git){var commit=plugin.commit?", :commit => '"+plugin.commit+"'":'';pluginInject+="  pod '"+plugin.podName+"', :git => '"+plugin.git+"'"+commit+"\n";}else if(plugin.version){pluginInject+="  pod '"+plugin.podName+"', '"+plugin.version+"'\n";}}}}}}}var pluginPermissions='';var permissions=c.appConfigFile.platforms[platform].permissions;if(permissions){permissions.forEach(function(v){if(c.permissionsConfig){var plat=c.permissionsConfig.permissions[platform]?platform:'ios';var pc=c.permissionsConfig.permissions[plat];if(pc[v]){pluginPermissions+="  <key>"+pc[v].key+"</key>\n  <string>"+pc[v].desc+"</string>\n";}}});}pluginPermissions=pluginPermissions.substring(0,pluginPermissions.length-1);(0,_common.writeCleanFile)(_path.default.join((0,_common.getAppTemplateFolder)(c,platform),'Podfile'),_path.default.join(appFolder,'Podfile'),[{pattern:'{{PLUGIN_PATHS}}',override:pluginInject}]);var projectPath=_path.default.join(appFolder,appFolderName+".xcodeproj/project.pbxproj");var xcodeProj=xcode.project(projectPath);xcodeProj.parse(function(err){var appId=(0,_common.getAppId)(c,platform);if(tId){xcodeProj.updateBuildProperty('DEVELOPMENT_TEAM',tId);}else{xcodeProj.updateBuildProperty('DEVELOPMENT_TEAM','""');}xcodeProj.updateBuildProperty('PRODUCT_BUNDLE_IDENTIFIER',appId);var pluginFonts='';if(c.appConfigFile){if(_fs.default.existsSync(c.fontsConfigFolder)){_fs.default.readdirSync(c.fontsConfigFolder).forEach(function(font){if(font.includes('.ttf')||font.includes('.otf')){var _key=font.split('.')[0];var includedFonts=c.appConfigFile.common.includedFonts;if(includedFonts&&(includedFonts.includes('*')||includedFonts.includes(_key))){var fontSource=_path.default.join(c.projectConfigFolder,'fonts',font);if(_fs.default.existsSync(fontSource)){var fontFolder=_path.default.join(appFolder,'fonts');(0,_fileutils.mkdirSync)(fontFolder);var fontDest=_path.default.join(fontFolder,font);(0,_fileutils.copyFileSync)(fontSource,fontDest);xcodeProj.addResourceFile(fontSource);pluginFonts+="  <string>"+font+"</string>\n";}else{(0,_common.logWarning)("Font "+_chalk.default.white(fontSource)+" doesn't exist! Skipping.");}}}});}}_fs.default.writeFileSync(projectPath,xcodeProj.writeSync());(0,_common.writeCleanFile)(_path.default.join(appTemplateFolder,appFolderName+"/Info.plist"),plistPath,[{pattern:'{{PLUGIN_FONTS}}',override:pluginFonts},{pattern:'{{PLUGIN_PERMISSIONS}}',override:pluginPermissions},{pattern:'{{PLUGIN_APPTITLE}}',override:(0,_common.getAppTitle)(c,platform)},{pattern:'{{PLUGIN_VERSION_STRING}}',override:(0,_common.getAppVersion)(c,platform)}]);resolve();});});};var _getAppFolderName=function _getAppFolderName(c,platform){var projectFolder=(0,_common.getConfigProp)(c,platform,'projectFolder');if(projectFolder){return projectFolder;}return platform===_constants.IOS?'RNVApp':'RNVAppTVOS';};var listAppleDevices=function listAppleDevices(c,platform){return new Promise(function(resolve,reject){(0,_common.logTask)("listAppleDevices:"+platform);var devicesArr=_getAppleDevices(c,platform);var devicesString='\n';devicesArr.forEach(function(v,i){devicesString+="-["+(i+1)+"] "+_chalk.default.white(v.name)+" | v: "+_chalk.default.green(v.version)+" | udid: "+_chalk.default.blue(v.udid)+(v.isDevice?_chalk.default.red(' (device)'):'')+"\n";});console.log(devicesString);});};exports.listAppleDevices=listAppleDevices;var launchAppleSimulator=function launchAppleSimulator(c,platform,target){return new Promise(function(resolve,reject){(0,_common.logTask)("launchAppleSimulator:"+platform+":"+target);var devicesArr=_getAppleDevices(c,platform,true);var selectedDevice;for(var i=0;i<devicesArr.length;i++){if(devicesArr[i].name===target){selectedDevice=devicesArr[i];}}if(selectedDevice){_launchSimulator(selectedDevice);resolve(selectedDevice.name);}else{(0,_common.logWarning)("Your specified simulator target "+_chalk.default.white(target)+" doesn't exists");var readline=require('readline').createInterface({input:process.stdin,output:process.stdout});var devicesString='\n';devicesArr.forEach(function(v,i){devicesString+="-["+(i+1)+"] "+_chalk.default.white(v.name)+" | v: "+_chalk.default.green(v.version)+" | udid: "+_chalk.default.blue(v.udid)+(v.isDevice?_chalk.default.red(' (device)'):'')+"\n";});readline.question((0,_common.getQuestion)(devicesString+"\nType number of the simulator you want to launch"),function(v){var selectedDevice=devicesArr[parseInt(v,10)-1];if(selectedDevice){_launchSimulator(selectedDevice);resolve(selectedDevice.name);}else{(0,_common.logError)("Wrong choice "+v+"! Ingoring");}});}});};exports.launchAppleSimulator=launchAppleSimulator;var _launchSimulator=function _launchSimulator(selectedDevice){try{child_process.spawnSync('xcrun',['instruments','-w',selectedDevice.udid]);}catch(e){}};var _getAppleDevices=function _getAppleDevices(c,platform,ignoreDevices,ignoreSimulators){var devices=child_process.execFileSync('xcrun',['instruments','-s'],{encoding:'utf8'});var devicesArr=_parseIOSDevicesList(devices,platform,ignoreDevices,ignoreSimulators);return devicesArr;};var _parseIOSDevicesList=function _parseIOSDevicesList(text,platform){var ignoreDevices=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var ignoreSimulators=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var devices=[];text.split('\n').forEach(function(line){var device=line.match(/(.*?) \((.*?)\) \[(.*?)\]/);var sim=line.match(/(.*?) \((.*?)\) \[(.*?)\] \((.*?)\)/);if(device!=null){var name=device[1];var version=device[2];var udid=device[3];var isDevice=sim===null;if(isDevice&&!ignoreDevices||!isDevice&&!ignoreSimulators){switch(platform){case _constants.IOS:if(name.includes('iPhone')||name.includes('iPad')||name.includes('iPod')||isDevice){devices.push({udid:udid,name:name,version:version,isDevice:isDevice});}break;case _constants.TVOS:if(name.includes('Apple TV')||isDevice){devices.push({udid:udid,name:name,version:version,isDevice:isDevice});}break;default:devices.push({udid:udid,name:name,version:version,isDevice:isDevice});break;}}}});return devices;};var runAppleLog=function runAppleLog(c,platform){return new Promise(function(resolve,reject){var filter=c.program.filter||'RNV';var child=require('child_process').execFile('xcrun',['simctl','spawn','booted','log','stream','--predicate',"eventMessage contains \""+filter+"\""],{stdio:'inherit',customFds:[0,1,2]});child.stdout.on('data',function(data){var d=data.toString();if(d.toLowerCase().includes('error')){console.log(_chalk.default.red(d));}else if(d.toLowerCase().includes('success')){console.log(_chalk.default.green(d));}else{console.log(d);}});});};exports.runAppleLog=runAppleLog;