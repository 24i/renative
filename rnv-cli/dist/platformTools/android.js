var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.runAndroidLog=exports.configureAndroidProperties=exports.runAndroid=exports.packageAndroid=exports.listAndroidTargets=exports.buildAndroid=exports.launchAndroidSimulator=exports.configureGradleProject=exports.copyAndroidAssets=void 0;var _path=_interopRequireDefault(require("path"));var _fs=_interopRequireDefault(require("fs"));var _chalk=_interopRequireDefault(require("chalk"));var _shelljs=_interopRequireDefault(require("shelljs"));var _child_process=_interopRequireDefault(require("child_process"));var _exec=require("../exec");var _platform=require("../cli/platform");var _common=require("../common");var _fileutils=require("../fileutils");var launchAndroidSimulator=function launchAndroidSimulator(c,platform,target){var isIndependentThread=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;return new Promise(function(resolve,reject){(0,_common.logTask)("launchAndroidSimulator:"+platform+":"+target);if(target==='?'||target===undefined||target===''){_listAndroidTargets(c,true,false).then(function(devicesArr){var devicesString='\n';devicesArr.forEach(function(v,i){devicesString+=_getDeviceString(v,i);});var readline=require('readline').createInterface({input:process.stdin,output:process.stdout});readline.question((0,_common.getQuestion)(devicesString+"\nType number of the emulator you want to launch"),function(v){var selectedDevice=devicesArr[parseInt(v,10)-1];if(selectedDevice){if(isIndependentThread){(0,_exec.execCLI)(c,_common.CLI_ANDROID_EMULATOR,"-avd \""+selectedDevice.name+"\"");resolve();}else{(0,_exec.execCLI)(c,_common.CLI_ANDROID_EMULATOR,"-avd \""+selectedDevice.name+"\"").then(function(){return resolve();}).catch(function(e){return reject(e);});}}else{(0,_common.logError)("Wrong choice "+v+"! Ingoring");}});}).catch(function(e){return reject(e);});return;}if(target){if(isIndependentThread){(0,_exec.execCLI)(c,_common.CLI_ANDROID_EMULATOR,"-avd \""+target+"\"");resolve();}else{(0,_exec.execCLI)(c,_common.CLI_ANDROID_EMULATOR,"-avd \""+target+"\"").then(function(){return resolve();}).catch(function(e){return reject(e);});}return;}reject('No simulator -t target name specified!');});};exports.launchAndroidSimulator=launchAndroidSimulator;var listAndroidTargets=function listAndroidTargets(c){return new Promise(function(resolve,reject){(0,_common.logTask)('listAndroidTargets');_listAndroidTargets(c,false,false).then(function(devicesArr){var devicesString='\n';devicesArr.forEach(function(v,i){devicesString+=_getDeviceString(v,i);});console.log(devicesString);}).catch(function(e){return reject(e);});});};exports.listAndroidTargets=listAndroidTargets;var _getDeviceString=function _getDeviceString(v,i){return"-["+(i+1)+"] "+_chalk.default.white(v.name)+" | udid: "+_chalk.default.blue(v.udid)+(v.isDevice?_chalk.default.red(' (device)'):'')+(v.isActive?_chalk.default.magenta(' (active)'):'')+"\n";};var _listAndroidTargets=function _listAndroidTargets(c,skipDevices,skipAvds){var deviceOnly=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;return new Promise(function(resolve,reject){(0,_common.logTask)('_listAndroidTargets');try{var devicesResult;var avdResult;if(!skipDevices){devicesResult=_child_process.default.execSync(c.cli[_common.CLI_ANDROID_ADB]+" devices -l").toString();}if(!skipAvds){avdResult=_child_process.default.execSync(c.cli[_common.CLI_ANDROID_EMULATOR]+" -list-avds").toString();}resolve(_parseDevicesResult(devicesResult,avdResult,deviceOnly));}catch(e){reject(e);}});};var _parseDevicesResult=function _parseDevicesResult(devicesString,avdsString,deviceOnly){var devices=[];if(devicesString){var lines=devicesString.trim().split(/\r?\n/);for(var i=0;i<lines.length;i++){var words=lines[i].split(/[ ,\t]+/).filter(function(w){return w!=='';});if(words[1]==='device'){var isDevice=!words[0].includes('emulator');if(deviceOnly&&isDevice||!deviceOnly){devices.push({udid:words[0],isDevice:isDevice,isActive:true,name:_getDeviceProp(words,'model:')});}}}}if(avdsString){var avdLines=avdsString.trim().split(/\r?\n/);for(var _i=0;_i<avdLines.length;_i++){var avdWords=avdLines[_i];devices.push({udid:'unknown',isDevice:false,isActive:false,name:avdWords});}}return devices;};var _getDeviceProp=function _getDeviceProp(arr,prop){for(var i=0;i<arr.length;i++){var v=arr[i];if(v&&v.includes(prop))return v.replace(prop,'');}return'';};var _askForNewEmulator=function _askForNewEmulator(c,platform){return new Promise(function(resolve,reject){(0,_common.logTask)('_askForNewEmulator');var emuName=c.globalConfig.defaultTargets[platform];var readline=require('readline').createInterface({input:process.stdin,output:process.stdout});readline.question((0,_common.getQuestion)("Do you want ReNative to create new Emulator ("+_chalk.default.white(emuName)+") for you? (y) to confirm"),function(v){if(v.toLowerCase()==='y'){readline.question((0,_common.getQuestion)('Input desired Android API version number'),function(v){var apiVersion=v;readline.question((0,_common.getQuestion)('Select device type: \n 1: Android Phone \n 2: Android TV \n 3: Android Wear \n'),function(v){switch(parseInt(v)){case 1:return _createEmulator(c,apiVersion,'google_apis',emuName);case 2:return _createEmulator(c,apiVersion,'android-tv',emuName);case 3:return _createEmulator(c,apiVersion,'android-wear',emuName);default:reject('Wrong value entered');}});});}else{reject('Cannot find any active emulators');}});});};var _createEmulator=function _createEmulator(c,apiVersion,emuPlatform,emuName){return new Promise(function(resolve,reject){(0,_common.logTask)('_createEmulator');return(0,_exec.execCLI)(c,_common.CLI_ANDROID_SDKMANAGER,"\"system-images;android-"+apiVersion+";"+emuPlatform+";x86\"").then(function(){return(0,_exec.execCLI)(c,_common.CLI_ANDROID_AVDMANAGER,"create avd  -n "+emuName+" -k \"system-images;android-"+apiVersion+";"+emuPlatform+";x86\" ");});});};var copyAndroidAssets=function copyAndroidAssets(c,platform){return new Promise(function(resolve,reject){(0,_common.logTask)('copyAndroidAssets');if(!(0,_common.isPlatformActive)(c,platform,resolve))return;var destPath=_path.default.join((0,_common.getAppFolder)(c,platform),'app/src/main/res');var sourcePath=_path.default.join(c.appConfigFolder,"assets/"+platform+"/res");(0,_fileutils.copyFolderContentsRecursiveSync)(sourcePath,destPath);resolve();});};exports.copyAndroidAssets=copyAndroidAssets;var packageAndroid=function packageAndroid(c,platform){return new Promise(function(resolve,reject){(0,_common.logTask)('packageAndroid');var appFolder=(0,_common.getAppFolder)(c,platform);(0,_exec.executeAsync)('react-native',['bundle','--platform','android','--dev','false','--assets-dest',appFolder+"/app/src/main/res",'--entry-file',c.appConfigFile.platforms[platform].entryFile+".js",'--bundle-output',appFolder+"/app/src/main/assets/index.android.bundle"]).then(function(){return resolve();}).catch(function(e){return reject(e);});});};exports.packageAndroid=packageAndroid;var runAndroid=function runAndroid(c,platform,target){return new Promise(function(resolve,reject){(0,_common.logTask)("runAndroid:"+platform+":"+target);var bundleAssets=(0,_common.getConfigProp)(c,platform,'bundleAssets',false)===true;var bundleIsDev=(0,_common.getConfigProp)(c,platform,'bundleIsDev',false)===true;if(bundleAssets){packageAndroid(c,platform,bundleIsDev).then(function(v){return _runGradle(c,platform);}).then(function(){return resolve();}).catch(function(e){return reject(e);});}else{_runGradle(c,platform).then(function(){return resolve();}).catch(function(e){return reject(e);});}});};exports.runAndroid=runAndroid;var _runGradle=function _runGradle(c,platform){return new Promise(function(resolve,reject){var appFolder=(0,_common.getAppFolder)(c,platform);_shelljs.default.cd(""+appFolder);var signingConfig=(0,_common.getConfigProp)(c,platform,'signingConfig','Debug');_listAndroidTargets(c,false,true,c.program.device!==undefined).then(function(devicesArr){if(devicesArr.length===1){var dv=devicesArr[0];(0,_common.logInfo)("Found device "+dv.name+":"+dv.udid+"!");_runGradleApp(c,platform,appFolder,signingConfig,dv).then(function(){return resolve();}).catch(function(e){return reject(e);});}else if(devicesArr.length>1){(0,_common.logWarning)('More than one device is connected!');var devicesString='\n';devicesArr.forEach(function(v,i){devicesString+=_getDeviceString(v,i);});var readline=require('readline').createInterface({input:process.stdin,output:process.stdout});readline.question((0,_common.getQuestion)(devicesString+"\nType number of the device to use"),function(v){var selectedDevice=devicesArr[parseInt(v,10)-1];if(selectedDevice){(0,_common.logInfo)("Selected device "+selectedDevice.name+":"+selectedDevice.udid+"!");_runGradleApp(c,platform,appFolder,signingConfig,selectedDevice).then(function(){return resolve();}).catch(function(e){return reject(e);});}else{(0,_common.logError)("Wrong choice "+v+"! Ingoring");}});}else if(c.globalConfig.defaultTargets[platform]){(0,_common.logWarning)("No connected devices found. Launching "+_chalk.default.white(c.globalConfig.defaultTargets[platform])+" emulator!");launchAndroidSimulator(c,platform,c.globalConfig.defaultTargets[platform],true).then(function(){return _checkForActiveEmulator(c,platform);}).then(function(device){return _runGradleApp(c,platform,appFolder,signingConfig,device);}).then(function(){return resolve();}).catch(function(e){return reject(e);});}else{reject("No active or connected devices! You can launch android emulator with "+_chalk.default.white('rnv target launch -p android -t <TARGET_NAME>'));}}).catch(function(e){return reject(e);});});};var _checkForActiveEmulator=function _checkForActiveEmulator(c,platform){return new Promise(function(resolve,reject){var attempts=1;var maxAttempts=8;var poll=setInterval(function(){_listAndroidTargets(c,false,true,false).then(function(v){if(v.length>0){(0,_common.logSuccess)("Found active emulator! "+_chalk.default.white(v[0].udid)+". Will use it");clearInterval(poll);resolve(v[0]);}else{console.log("looking for active emulators: attempt "+attempts+"/"+maxAttempts);attempts++;if(attempts>maxAttempts){clearInterval(poll);return _askForNewEmulator(c,platform);}}}).catch(function(e){clearInterval(poll);(0,_common.logError)(e);});},2000);});};var _runGradleApp=function _runGradleApp(c,platform,appFolder,signingConfig,device){return new Promise(function(resolve,reject){var bundleId=(0,_common.getConfigProp)(c,platform,'id');var outputFolder=signingConfig==='Debug'?'debug':'release';(0,_exec.executeAsync)(process.platform==='win32'?'gradlew.bat':'./gradlew',["assemble"+signingConfig,'-x','bundleReleaseJsAndAssets']).then(function(){var apkPath=_path.default.join(appFolder,"app/build/outputs/apk/"+outputFolder+"/app-"+outputFolder+".apk");if(!_fs.default.existsSync(apkPath)){apkPath=_path.default.join(appFolder,"app/build/outputs/apk/"+outputFolder+"/app-"+outputFolder+"-unsigned.apk");}return(0,_exec.executeAsync)(c.cli[_common.CLI_ANDROID_ADB],['-s',device.udid,'install','-r','-d','-f',apkPath]);}).then(function(){return device.isDevice?(0,_exec.executeAsync)(c.cli[_common.CLI_ANDROID_ADB],['-s',device.udid,'reverse','tcp:8081','tcp:8081']):Promise.resolve();}).then(function(){return(0,_exec.executeAsync)(c.cli[_common.CLI_ANDROID_ADB],['-s',device.udid,'shell','am','start','-n',bundleId+"/.MainActivity"]);}).then(function(){return resolve();}).catch(function(e){return reject(e);});});};var buildAndroid=function buildAndroid(c,platform){return new Promise(function(resolve,reject){(0,_common.logTask)("buildAndroid:"+platform);var appFolder=(0,_common.getAppFolder)(c,platform);_shelljs.default.cd(""+appFolder);_shelljs.default.exec('./gradlew assembleRelease -x bundleReleaseJsAndAssets',function(error){if(error){(0,_common.logError)("Command 'gradlew assembleRelease -x bundleReleaseJsAndAssets' failed with error code "+error,true);return;}(0,_common.logSuccess)("Your APK is located in "+_chalk.default.white(_path.default.join(appFolder,'app/build/outputs/apk/release'))+".");resolve();});});};exports.buildAndroid=buildAndroid;var configureAndroidProperties=function configureAndroidProperties(c){return new Promise(function(resolve,reject){(0,_common.logTask)('configureAndroidProperties');var localProperties=_path.default.join(c.globalConfigFolder,'local.properties');if(_fs.default.existsSync(localProperties)){console.log('local.properties file exists!');}else{console.log('local.properties file missing! Creating one for you...');}_fs.default.writeFileSync(localProperties,"#Generated by ReNative\nndk.dir="+c.globalConfig.sdks.ANDROID_NDK+"\nsdk.dir="+c.globalConfig.sdks.ANDROID_SDK);resolve();});};exports.configureAndroidProperties=configureAndroidProperties;var configureGradleProject=function configureGradleProject(c,platform){return new Promise(function(resolve,reject){(0,_common.logTask)("configureGradleProject:"+platform);if(!(0,_common.isPlatformActive)(c,platform,resolve))return;configureAndroidProperties(c,platform).then(function(){return copyAndroidAssets(c,platform);}).then(function(){return(0,_common.copyBuildsFolder)(c,platform);}).then(function(){return configureProject(c,platform);}).then(function(){return resolve();}).catch(function(e){return reject(e);});});};exports.configureGradleProject=configureGradleProject;var _injectPlugin=function _injectPlugin(c,plugin,key,pkg,pluginConfig){var className=pkg?pkg.split('.').pop():null;var packageParams='';if(plugin.packageParams){packageParams=plugin.packageParams.join(',');}var pathFixed=plugin.path?""+plugin.path:"node_modules/"+key+"/android";var modulePath="../../"+pathFixed;if(plugin.projectName){pluginConfig.pluginIncludes+=", ':"+plugin.projectName+"'";pluginConfig.pluginPaths+="project(':"+plugin.projectName+"').projectDir = new File(rootProject.projectDir, '"+modulePath+"')\n";if(!plugin.skipImplementation){if(plugin.implementation){pluginConfig.pluginImplementations+=""+plugin.implementation;}else{pluginConfig.pluginImplementations+="    implementation project(':"+plugin.projectName+"')\n";}}}else{pluginConfig.pluginIncludes+=", ':"+key+"'";pluginConfig.pluginPaths+="project(':"+key+"').projectDir = new File(rootProject.projectDir, '"+modulePath+"')\n";if(!plugin.skipImplementation){if(plugin.implementation){pluginConfig.pluginImplementations+=""+plugin.implementation;}else{pluginConfig.pluginImplementations+="    implementation project(':"+key+"')\n";}}}if(plugin.activityImports instanceof Array){plugin.activityImports.forEach(function(activityImport){if(pluginConfig.pluginActivityImports.indexOf(activityImport)===-1){pluginConfig.pluginActivityImports+="import "+activityImport+"\n";}});}if(plugin.activityMethods instanceof Array){pluginConfig.pluginActivityMethods+=""+plugin.activityMethods.join('\n    ');}if(pkg)pluginConfig.pluginImports+="import "+pkg+"\n";if(className)pluginConfig.pluginPackages+=className+"("+packageParams+"),\n";if(plugin.implementations){plugin.implementations.forEach(function(v){pluginConfig.pluginImplementations+="    implementation '"+v+"'\n";});}if(plugin.afterEvaluate){plugin.afterEvaluate.forEach(function(v){pluginConfig.pluginAfterEvaluate+=" "+v+"\n";});}_fixAndroidLegacy(c,pathFixed);};var _fixAndroidLegacy=function _fixAndroidLegacy(c,modulePath){var buildGradle=_path.default.join(c.projectRootFolder,modulePath,'build.gradle');if(_fs.default.existsSync(buildGradle)){(0,_common.logDebug)('FIX:',buildGradle);(0,_common.writeCleanFile)(buildGradle,buildGradle,[{pattern:" compile '",override:"  implementation '"},{pattern:' compile "',override:'  implementation "'},{pattern:' testCompile "',override:'  testImplementation "'},{pattern:" provided '",override:"  compileOnly '"},{pattern:' provided "',override:'  compileOnly "'},{pattern:' compile fileTree',override:'  implementation fileTree'}]);}};var configureProject=function configureProject(c,platform){return new Promise(function(resolve,reject){(0,_common.logTask)("configureProject:"+platform);var appFolder=(0,_common.getAppFolder)(c,platform);var appTemplateFolder=(0,_common.getAppTemplateFolder)(c,platform);var gradlew=_path.default.join(appFolder,'gradlew');if(!_fs.default.existsSync(gradlew)){(0,_common.logWarning)("Looks like your "+_chalk.default.white(platform)+" platformBuild is misconfigured!. let's repair it.");(0,_platform.createPlatformBuild)(c,platform).then(function(){return configureGradleProject(c,platform);}).then(function(){return resolve(c);}).catch(function(e){return reject(e);});return;}(0,_fileutils.copyFileSync)(_path.default.join(c.globalConfigFolder,'local.properties'),_path.default.join(appFolder,'local.properties'));(0,_fileutils.mkdirSync)(_path.default.join(appFolder,'app/src/main/assets'));_fs.default.writeFileSync(_path.default.join(appFolder,'app/src/main/assets/index.android.bundle'),'{}');_fs.default.chmodSync(gradlew,'755');var pluginIncludes="include ':app'";var pluginPaths='';var pluginImports='';var pluginPackages='MainReactPackage(),\n';var pluginImplementations='';var pluginAfterEvaluate='';var pluginActivityImports='';var pluginActivityMethods='';var pluginConfig={pluginIncludes:pluginIncludes,pluginPaths:pluginPaths,pluginImports:pluginImports,pluginPackages:pluginPackages,pluginImplementations:pluginImplementations,pluginAfterEvaluate:pluginAfterEvaluate,pluginActivityImports:pluginActivityImports,pluginActivityMethods:pluginActivityMethods};if(c.appConfigFile&&c.pluginConfig){var includedPlugins=c.appConfigFile.common.includedPlugins;var excludedPlugins=c.appConfigFile.common.excludedPlugins;if(includedPlugins){var plugins=c.pluginConfig.plugins;var _loop=function _loop(key){if(includedPlugins.includes('*')||includedPlugins.includes(key)){var plugin=plugins[key][platform];if(plugin){if(plugins[key]['no-active']!==true){if(plugin.packages){plugin.packages.forEach(function(ppkg){_injectPlugin(c,plugin,key,ppkg,pluginConfig);});}else{_injectPlugin(c,plugin,key,plugin.package,pluginConfig);}}}}};for(var key in plugins){_loop(key);}}}pluginConfig.pluginPackages=pluginConfig.pluginPackages.substring(0,pluginConfig.pluginPackages.length-2);if(c.appConfigFile){if(_fs.default.existsSync(c.fontsConfigFolder)){_fs.default.readdirSync(c.fontsConfigFolder).forEach(function(font){if(font.includes('.ttf')||font.includes('.otf')){var key=font.split('.')[0];var includedFonts=c.appConfigFile.common.includedFonts;if(includedFonts){if(includedFonts.includes('*')||includedFonts.includes(key)){if(font){var fontSource=_path.default.join(c.projectConfigFolder,'fonts',font);if(_fs.default.existsSync(fontSource)){var fontFolder=_path.default.join(appFolder,'app/src/main/assets/fonts');(0,_fileutils.mkdirSync)(fontFolder);var fontDest=_path.default.join(fontFolder,font);(0,_fileutils.copyFileSync)(fontSource,fontDest);}else{(0,_common.logWarning)("Font "+_chalk.default.white(fontSource)+" doesn't exist! Skipping.");}}}}}});}}(0,_common.writeCleanFile)(_path.default.join(appTemplateFolder,'settings.gradle'),_path.default.join(appFolder,'settings.gradle'),[{pattern:'{{PLUGIN_INCLUDES}}',override:pluginConfig.pluginIncludes},{pattern:'{{PLUGIN_PATHS}}',override:pluginConfig.pluginPaths}]);(0,_common.writeCleanFile)(_path.default.join(appTemplateFolder,'app/build.gradle'),_path.default.join(appFolder,'app/build.gradle'),[{pattern:'{{APPLICATION_ID}}',override:(0,_common.getAppId)(c,platform)},{pattern:'{{VERSION_CODE}}',override:(0,_common.getAppVersionCode)(c,platform)},{pattern:'{{VERSION_NAME}}',override:(0,_common.getAppVersion)(c,platform)},{pattern:'{{PLUGIN_IMPLEMENTATIONS}}',override:pluginConfig.pluginImplementations},{pattern:'{{PLUGIN_AFTER_EVALUATE}}',override:pluginConfig.pluginAfterEvaluate}]);var activityPath='app/src/main/java/rnv/MainActivity.kt';(0,_common.writeCleanFile)(_path.default.join(appTemplateFolder,activityPath),_path.default.join(appFolder,activityPath),[{pattern:'{{APPLICATION_ID}}',override:(0,_common.getAppId)(c,platform)},{pattern:'{{PLUGIN_ACTIVITY_IMPORTS}}',override:pluginConfig.pluginActivityImports},{pattern:'{{PLUGIN_ACTIVITY_METHODS}}',override:pluginConfig.pluginActivityMethods}]);var applicationPath='app/src/main/java/rnv/MainApplication.kt';(0,_common.writeCleanFile)(_path.default.join(appTemplateFolder,applicationPath),_path.default.join(appFolder,applicationPath),[{pattern:'{{APPLICATION_ID}}',override:(0,_common.getAppId)(c,platform)},{pattern:'{{ENTRY_FILE}}',override:(0,_common.getEntryFile)(c,platform)},{pattern:'{{PLUGIN_IMPORTS}}',override:pluginConfig.pluginImports},{pattern:'{{PLUGIN_PACKAGES}}',override:pluginConfig.pluginPackages}]);var splashPath='app/src/main/java/rnv/SplashActivity.kt';(0,_common.writeCleanFile)(_path.default.join(appTemplateFolder,splashPath),_path.default.join(appFolder,splashPath),[{pattern:'{{APPLICATION_ID}}',override:(0,_common.getAppId)(c,platform)}]);var stringsPath='app/src/main/res/values/strings.xml';(0,_common.writeCleanFile)(_path.default.join(appTemplateFolder,stringsPath),_path.default.join(appFolder,stringsPath),[{pattern:'{{APP_TITLE}}',override:(0,_common.getAppTitle)(c,platform)}]);var prms='';var permissions=c.appConfigFile.platforms[platform].permissions;if(permissions){permissions.forEach(function(v){if(c.permissionsConfig){var plat=c.permissionsConfig.permissions[platform]?platform:'ios';var pc=c.permissionsConfig.permissions[plat];if(pc[v]){prms+="\n<uses-permission android:name=\""+pc[v].key+"\" />";}}});}var manifestFile='app/src/main/AndroidManifest.xml';(0,_common.writeCleanFile)(_path.default.join(appTemplateFolder,manifestFile),_path.default.join(appFolder,manifestFile),[{pattern:'{{APPLICATION_ID}}',override:(0,_common.getAppId)(c,platform)},{pattern:'{{PERMISIONS}}',override:prms}]);var globalAppConfigPath=_path.default.join(c.globalConfigFolder,c.appConfigFile.id);var signingPropertiesPath=_path.default.join(globalAppConfigPath,'signing.properties');var signingPropFile=null;if(_fs.default.existsSync(signingPropertiesPath)){signingPropFile="new File(\""+signingPropertiesPath+"\")";}else{(0,_common.logWarning)("You're missing signing.properties for this app: "+_chalk.default.white(signingPropertiesPath)+". You won't be able to make production releases without it!");}(0,_common.writeCleanFile)(_path.default.join(appTemplateFolder,'build.gradle'),_path.default.join(appFolder,'build.gradle'),[{pattern:'{{SIGNING_PROPS_FILE}}',override:signingPropFile}]);resolve();});};var runAndroidLog=function runAndroidLog(c,platform){return new Promise(function(resolve,reject){var filter=c.program.filter||'';var child=require('child_process').spawn(c.cli[_common.CLI_ANDROID_ADB],['logcat']);child.stdout.on('data',function(data){var d=data.toString().split('\n');d.forEach(function(v){if(v.includes(' E ')&&v.includes(filter)){console.log(_chalk.default.red(v));}else if(v.includes(' W ')&&v.includes(filter)){console.log(_chalk.default.yellow(v));}else if(v.includes(filter)){console.log(v);}});});});};exports.runAndroidLog=runAndroidLog;