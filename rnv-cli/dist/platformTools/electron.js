var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.runElectronDevServer=exports.buildElectron=exports.runElectron=exports.configureElectronProject=void 0;var _path=_interopRequireDefault(require("path"));var _fs=_interopRequireDefault(require("fs"));var _shelljs=_interopRequireDefault(require("shelljs"));var _chalk=_interopRequireDefault(require("chalk"));var _child_process=require("child_process");var _platform=require("../cli/platform");var _exec=require("../exec");var _common=require("../common");var _web=require("./web");var _fileutils=require("../fileutils");var configureElectronProject=function configureElectronProject(c,platform){return new Promise(function(resolve,reject){(0,_common.logTask)('configureElectronProject');configureProject(c,platform).then(function(){return resolve();}).catch(function(e){return reject(e);});});};exports.configureElectronProject=configureElectronProject;var configureProject=function configureProject(c,platform){return new Promise(function(resolve,reject){(0,_common.logTask)("configureProject:"+platform);if(!(0,_common.isPlatformActive)(c,platform,resolve))return;var appFolder=(0,_common.getAppFolder)(c,platform);var templateFolder=(0,_common.getAppTemplateFolder)(c,platform);var bundleIsDev=(0,_common.getConfigProp)(c,platform,'bundleIsDev')===true;var bundleAssets=(0,_common.getConfigProp)(c,platform,'bundleAssets')===true;var packagePath=_path.default.join(appFolder,'package.json');if(!_fs.default.existsSync(packagePath)){(0,_common.logWarning)("Looks like your "+_chalk.default.white(platform)+" platformBuild is misconfigured!. let's repair it.");(0,_platform.createPlatformBuild)(c,platform).then(function(){return(0,_common.copyBuildsFolder)(c,platform);}).then(function(){return configureElectronProject(c,platform);}).then(function(){return resolve(c);}).catch(function(e){return reject(e);});return;}var pkgJson=_path.default.join(templateFolder,'package.json');var packageJson=JSON.parse(_fs.default.readFileSync(pkgJson));packageJson.name=(0,_common.getAppConfigId)(c,platform)+"-"+platform;packageJson.productName=(0,_common.getAppTitle)(c,platform)+" - "+platform;packageJson.version=""+(0,_common.getAppVersion)(c,platform);packageJson.description=""+(0,_common.getAppDescription)(c,platform);packageJson.author=(0,_common.getAppAuthor)(c,platform);packageJson.license=""+(0,_common.getAppLicense)(c,platform);packageJson.main='./main.js';_fs.default.writeFileSync(packagePath,JSON.stringify(packageJson,null,2));if(bundleAssets){(0,_fileutils.copyFileSync)(_path.default.join(templateFolder,'_privateConfig','main.js'),_path.default.join(appFolder,'main.js'));(0,_fileutils.copyFileSync)(_path.default.join(templateFolder,'_privateConfig','webpack.config.js'),_path.default.join(appFolder,'webpack.config.js'));}else{(0,_common.writeCleanFile)(_path.default.join(templateFolder,'_privateConfig','main.dev.js'),_path.default.join(appFolder,'main.js'),[{pattern:'{{DEV_SERVER}}',override:"http://0.0.0.0:"+c.defaultPorts[platform]}]);(0,_fileutils.copyFileSync)(_path.default.join(templateFolder,'_privateConfig','webpack.config.dev.js'),_path.default.join(appFolder,'webpack.config.js'));}resolve();});};var buildElectron=function buildElectron(c,platform){return new Promise(function(resolve,reject){(0,_common.logTask)("buildElectron:"+platform);var appFolder=(0,_common.getAppFolder)(c,platform);(0,_web.buildWeb)(c,platform).then(function(){return resolve();}).catch(function(e){return reject(e);});});};exports.buildElectron=buildElectron;var runElectron=function runElectron(c,platform,port){return new Promise(function(resolve,reject){(0,_common.logTask)("runElectron:"+platform);var elc=_path.default.resolve(c.nodeModulesFolder,'electron/cli.js');var appFolder=(0,_common.getAppFolder)(c,platform);var bundleIsDev=(0,_common.getConfigProp)(c,platform,'bundleIsDev')===true;var bundleAssets=(0,_common.getConfigProp)(c,platform,'bundleAssets')===true;if(bundleAssets){buildElectron(c,platform,bundleIsDev).then(function(v){return _runElectronSimulator(c,platform);}).then(function(){return resolve();}).catch(function(e){return reject(e);});}else{(0,_common.checkPortInUse)(c,platform,port).then(function(isPortActive){if(!isPortActive){(0,_common.logInfo)("Looks like your "+_chalk.default.white(platform)+" devServer at port "+_chalk.default.white(port)+" is not running. Starting it up for you...");_runElectronSimulator(c,platform).then(function(){return runElectronDevServer(c,platform,port);}).then(function(){return resolve();}).catch(function(e){return reject(e);});}else{(0,_common.logInfo)("Looks like your "+_chalk.default.white(platform)+" devServer at port "+_chalk.default.white(port)+" is already running. ReNativeWill use it!");_runElectronSimulator(c,platform).then(function(){return resolve();}).catch(function(e){return reject(e);});}}).catch(function(e){return reject(e);});}});};exports.runElectron=runElectron;var _runElectronSimulator=function _runElectronSimulator(c,platform){return new Promise(function(resolve,reject){var appFolder=(0,_common.getAppFolder)(c,platform);var elc=_path.default.resolve(c.nodeModulesFolder,'electron/cli.js');var child=(0,_child_process.spawn)(elc,[appFolder],{detached:true,shell:true,env:process.env,stdio:'inherit'}).on('close',function(code){return process.exit(code);}).on('error',function(spawnError){return console.error(spawnError);});child.unref();resolve();});};var runElectronDevServer=function runElectronDevServer(c,platform,port){return new Promise(function(resolve,reject){(0,_common.logTask)("runElectronDevServer:"+platform);var appFolder=(0,_common.getAppFolder)(c,platform);var templateFolder=(0,_common.getAppTemplateFolder)(c,platform);(0,_fileutils.copyFileSync)(_path.default.join(templateFolder,'_privateConfig','webpack.config.dev.js'),_path.default.join(appFolder,'webpack.config.js'));(0,_web.runWebDevServer)(c,platform,port).then(function(){return resolve();}).catch(function(e){return reject(e);});});};exports.runElectronDevServer=runElectronDevServer;