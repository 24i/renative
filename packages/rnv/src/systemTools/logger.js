import chalk from 'chalk';


const RNV_START = 'üöÄ ReNative';
const RNV = 'ReNative';
const LINE = chalk.white.bold('----------------------------------------------------------');
const LINE2 = chalk.gray('----------------------------------------------------------');

export const logWelcome = () => {
    console.log(`
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                                                                              ‚îÇ
‚îÇ        ${chalk.red('‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó')} ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó${chalk.red('‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó')} ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó${chalk.red('‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó')}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó       ‚îÇ
‚îÇ        ${chalk.red('‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó')}‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù${chalk.red('‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë')}‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë${chalk.red('‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë')}‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù       ‚îÇ
‚îÇ        ${chalk.red('‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù')}‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ${chalk.red('‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë')}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë${chalk.red('‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë')}‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó         ‚îÇ
‚îÇ        ${chalk.red('‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó')}‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ${chalk.red('‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë')}‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë${chalk.red('‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù')}‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù         ‚îÇ
‚îÇ        ${chalk.red('‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë')}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó${chalk.red('‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë')}‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë${chalk.red(' ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ')}‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó       ‚îÇ
‚îÇ        ${chalk.red('‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù')}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${chalk.red('‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù')}‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù${chalk.red('  ‚ïö‚ïê‚ïê‚ïê‚ïù  ')}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù       ‚îÇ
‚îÇ                                                                              ‚îÇ
‚îÇ        v0.23.22                                                              ‚îÇ
‚îÇ        üöÄüöÄüöÄ https://renative.org üöÄüöÄüöÄ                                    ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
    `);
};

let _messages;
let _currentJob;
let _currentProcess;
let _isInfoEnabled = false;

export const configureLogger = (process, job, subCommand, isInfoEnabled) => {
    _messages = [];
    _currentJob = job;
    _currentProcess = process;
    _currentSubCommand = subCommand;
    _isInfoEnabled = isInfoEnabled;
};

export const logAndSave = (msg, skipLog) => {
    if (!_messages.includes(msg)) _messages.push(msg);
    if (!skipLog) console.log(`${msg}`);
};

export const logSummary = () => {
    let logContent = chalk.default('‚îÇ  All good as ü¶Ñ                                                              ‚îÇ');
    if (_messages.length) {
        logContent = '';
        _messages.forEach((m) => {
            logContent += `‚îÇ ${m}\n`;
        });
        logContent += '‚îÇ';
    }


    let str = chalk.default(`
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  üöÄ  SUMMARY                                                                 ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ                                                                              ‚îÇ
`);

    str += logContent;
    str += chalk.default(`
‚îÇ                                                                              ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

    `);

    console.log(str);
};

export const setCurrentJob = (job) => {
    _currentJob = job;
};

export const logTask = (task) => {
    console.log(chalk.green(`${RNV} ${_currentJob} - ${task} - Starting!`));
};

export const logWarning = (msg) => {
    logAndSave(chalk.yellow(`‚ö†Ô∏è  ${RNV} ${_currentJob} - WARNING: ${msg}`));
};

export const logInfo = (msg) => {
    console.log(chalk.magenta(`‚ÑπÔ∏è  ${RNV} ${_currentJob} - NOTE: ${msg}`));
};

export const logDebug = (...args) => {
    if (_isInfoEnabled) console.log.apply(null, args);
};

export const logComplete = (isEnd = false) => {
    console.log(chalk.white.bold(`\n ${RNV} ${_currentJob || ''} - Done! üöÄ`));
    if (isEnd) logEnd(0);
};

export const logSuccess = (msg) => {
    console.log(`‚úÖ ${chalk.magenta(msg)}`);
};

export const logError = (e, isEnd = false) => {
    if (e && e.message) {
        logAndSave(chalk.red.bold(`üõë  ${RNV} ${_currentJob} - ERRROR! ${e.message}\n${e.stack}`), isEnd);
    } else {
        logAndSave(chalk.red.bold(`üõë  ${RNV} ${_currentJob} - ERRROR! ${e}`), isEnd);
    }
    if (isEnd) logEnd(1);
};

export const logEnd = (code) => {
    logSummary();
    _currentProcess.exit(code);
};

export const logInitialize = () => {
    console.log(
        chalk.white(`\n${LINE}\n ${RNV_START} ${chalk.white.bold(`${_currentJob} ${_currentSubCommand || ''}`)} is firing up! üî•\n${LINE}\n`),
    );
};

export const logAppInfo = c => new Promise((resolve, reject) => {
    console.log(chalk.gray(`\n${LINE2}\n‚ÑπÔ∏è  Current App Config: ${chalk.white.bold(c.files.appConfigFile.id)}\n${LINE2}`));

    resolve();
});
